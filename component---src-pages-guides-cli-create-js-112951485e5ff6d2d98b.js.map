{"version":3,"sources":["webpack:///./src/pages/guides/cli-create.js","webpack:///./src/components/references/dotnet.js","webpack:///./src/components/code/highlight.js","webpack:///./utilities/array.js"],"names":["title","__webpack_exports__","_staticQueryData$data","_public_static_d_1346324293_json__WEBPACK_IMPORTED_MODULE_0__","data","site","siteMetadata","latestRelease","projectName","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","Fragment","react_helmet__WEBPACK_IMPORTED_MODULE_3__","gatsby__WEBPACK_IMPORTED_MODULE_1__","to","_components_code_highlight__WEBPACK_IMPORTED_MODULE_4__","language","_components_site_external_link__WEBPACK_IMPORTED_MODULE_6__","inline","_components_references_dotnet__WEBPACK_IMPORTED_MODULE_5__","id","confluentDocfxBase","microsoftDocfxBase","DotnetExpansion","_ref","_ref$typeParameters","typeParameters","_ref$methodTypeParame","methodTypeParameters","substring","react__WEBPACK_IMPORTED_MODULE_12___default","DotnetLink","createMemberName","method","key","length","push","apply","concat","_toConsumableArray","join","getMethodParameters","map","type","index","typeBinding","match","methodBinding","createTypeName","bound","getTypeParameters","unbound","Array","getTypeSuffix","_ref2","children","test","gatsby__WEBPACK_IMPORTED_MODULE_11__","createDocfxUrl","toLowerCase","_site_external_link__WEBPACK_IMPORTED_MODULE_13__","DotnetReference","_ref3","others","_objectWithoutPropertiesLoose","Object","assign","SyntaxHighlighter","registerLanguage","json","csharp","shell","style","github","hljs","Highlight","react__WEBPACK_IMPORTED_MODULE_1___default","react_syntax_highlighter__WEBPACK_IMPORTED_MODULE_2__","PreTag","module","exports","groupBy","list","reduce","item","k","has","set","get","Map","separator","result","array"],"mappings":"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","file":"component---src-pages-guides-cli-create-js-112951485e5ff6d2d98b.js","sourcesContent":["import { Link, graphql, useStaticQuery } from 'gatsby'\nimport React from 'react'\nimport { Helmet } from 'react-helmet'\n\nimport Highlight from '../../components/code/highlight'\nimport DotnetReference from '../../components/references/dotnet'\nimport ExternalLink from '../../components/site/external-link'\n\nconst title = 'Creating schemas from .NET types'\n\nexport default () => {\n  const {\n    site: {\n      siteMetadata: { latestRelease, projectName }\n    }\n  } = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          latestRelease\n          projectName\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n\n      <h1>{title}</h1>\n      <p>Creating schemas from complex .NET types is a time-saving way to get started with Avro. {projectName} recognizes most commonly used types and supports classes, structs, and enums, so it’s usually possible to get a working schema with no additional manipulation.</p>\n      <p>For detailed information about how types are matched to schemas, see the <Link to='/internals/mapping'>types and conversions</Link> documentation.</p>\n\n      <h2>Getting started</h2>\n      <p>If you haven’t already, install the {projectName} CLI:</p>\n      <Highlight language='shell'>{`$ dotnet tool install Chr.Avro.Cli --global\n  Tool 'chr.avro.cli' (version '${latestRelease}') was successfully installed.`}</Highlight>\n      <p>After the CLI tool has been installed, you can invoke it using <code>dotnet avro</code>. If the install command fails, make sure you have the latest version of the <ExternalLink to='https://dotnet.microsoft.com/download'>.NET Core SDK</ExternalLink> installed.</p>\n\n      <h2>Using the CLI</h2>\n      <p>To create a schema for a type, use the <Link to='/cli#create'><Highlight inline language='shell'>create</Highlight></Link> command. You’ll need to provide the type’s full name as well as the path to a compiled assembly that contains it:</p>\n      <Highlight language='shell'>{`$ dotnet avro create --type ExampleNamespace.ExampleLibrary.ExampleClass --assembly bin/Debug/netstandard2.0/ExampleNamespace.ExampleLibrary.dll\n{\"name\":\"ExampleNamespace.ExampleLibrary.ExampleClass\",\"type\":\"record\",\"fields\":[{\"name\":\"ExampleProperty\",\"type\":\"int\"}]}`}</Highlight>\n\n      <h2>Customizing generated schemas</h2>\n      <p>The CLI ships with some convenience options:</p>\n      <ul>\n        <li>\n          <p>The <strong><code>--nullable-references</code></strong> option causes all reference types to be written as nullable unions. This is useful when you prefer to keep .NET’s nullable semantics.</p>\n        </li>\n        <li>\n          <p>The <strong><code>--enums-as-integers</code></strong> option causes enums to be represented as <Highlight inline language='avro'>\"int\"</Highlight> or <Highlight inline language='avro'>\"long\"</Highlight> schemas instead of <Highlight inline language='avro'>\"enum\"</Highlight> schemas.</p>\n        </li>\n      </ul>\n      <p>{projectName} also recognizes <DotnetReference id='T:System.Runtime.Serialization.DataContractAttribute'>data contract attributes</DotnetReference>, which can be used to customize names.</p>\n      <p>If you need to make more complicated modifications to a generated schema, you can customize the schema creation process in code:</p>\n      <Highlight language='csharp'>{`using Chr.Avro.Abstract;\nusing Chr.Avro.Representation;\nusing System;\n\nnamespace Chr.Avro.Examples.SchemaCustomization\n{\n    public class ExampleClass\n    {\n        public int NumericProperty { get; set; }\n    }\n\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            var builder = new SchemaBuilder();\n            var schema = builder.BuildSchema<ExampleClass>(); // a RecordSchema instance\n\n            // do modifications here\n\n            var writer = new JsonSchemaWriter();\n            Console.WriteLine(writer.Write(schema));\n        }\n    }\n}`}</Highlight>\n    </>\n  )\n}\n","import { Link } from 'gatsby'\nimport React from 'react'\n\nimport ExternalLink from '../site/external-link'\n\nimport { join } from '../../../utilities/array'\n\nimport {\n  createDocfxUrl,\n  createMemberName,\n  createTypeName,\n  getMethodParameters,\n  getTypeParameters,\n  getTypeSuffix\n} from '../../../utilities/dotnet'\n\nconst confluentDocfxBase = 'https://docs.confluent.io/current/clients/confluent-kafka-dotnet/api/'\nconst microsoftDocfxBase = 'https://docs.microsoft.com/en-us/dotnet/api/'\n\nfunction DotnetExpansion ({ id, typeParameters = [], methodTypeParameters = [] }) {\n  switch (id.substring(0, 2)) {\n    case 'F:':\n    case 'P:':\n      return <DotnetLink id={id}>{createMemberName(id)}</DotnetLink>\n\n    case 'M:':\n      const method = [<DotnetLink key={id} id={id}>{createMemberName(id)}</DotnetLink>]\n\n      if (methodTypeParameters && methodTypeParameters.length) {\n        method.push('<', ...join(methodTypeParameters , ', '), '>')\n      }\n\n      method.push('(', ...join(getMethodParameters(id).map((type, index) =>\n        <DotnetExpansion key={index} id={`T:${type}`} typeParameters={typeParameters} methodTypeParameters={methodTypeParameters} />\n      ), ', '), ')');\n\n      return method\n\n    case 'T:':\n      const typeBinding = id.match(/^T:`(\\d+)$/)\n      const methodBinding = id.match(/^T:``(\\d+)$/)\n\n      if (typeBinding) {\n        return typeParameters[typeBinding[1]] || ''\n      }\n      else if (methodBinding) {\n        return methodTypeParameters[methodBinding[1]] || ''\n      }\n\n      const type = [<DotnetLink key={id} id={id}>{createTypeName(id)}</DotnetLink>]\n      const bound = getTypeParameters(id)\n      const unbound = id.match(/^T:(.+)`(\\d+)$/)\n\n      if (bound || unbound) {\n        type.push('<')\n\n        if (bound) {\n          type.push(...join(bound.map((type, index) =>\n            <DotnetExpansion key={index} id={`T:${type}`} typeParameters={typeParameters} methodTypeParameters={methodTypeParameters} />\n          ), ', '))\n        }\n\n        if (unbound) {\n          id = unbound[1]\n          type.push(new Array(+unbound[2]).join(','))\n        }\n\n        type.push('>')\n      }\n\n      type.push(getTypeSuffix(id))\n      return type\n\n    default:\n      return <DotnetLink id={id}>{id.substring(2)}</DotnetLink>\n  }\n}\n\nfunction DotnetLink ({ children, id }) {\n  if (/^[EFMNPT]:Chr\\.Avro/.test(id)) {\n    return <Link to={`/api/${createDocfxUrl(id).toLowerCase()}`}>{children}</Link>\n  }\n\n  if (/^[EFMNPT]:Confluent\\.(?:Kafka|SchemaRegistry)/.test(id)) {\n    return <ExternalLink to={`${confluentDocfxBase}${createDocfxUrl(id)}.html`}>{children}</ExternalLink>\n  }\n\n  if (/^[EFMNPT]:(?:Microsoft|System)/.test(id)) {\n    return <ExternalLink to={`${microsoftDocfxBase}${createDocfxUrl(id).toLowerCase()}`}>{children}</ExternalLink>\n  }\n\n  return children\n}\n\nexport default function DotnetReference ({ children, id, typeParameters, methodTypeParameters, ...others }) {\n  return children\n    ? <DotnetLink id={id} {...others}>{children}</DotnetLink>\n    : <code {...others}>\n        <DotnetExpansion id={id} typeParameters={typeParameters} methodTypeParameters={methodTypeParameters} />\n      </code>\n}\n","import React from 'react'\nimport { LightAsync as SyntaxHighlighter } from 'react-syntax-highlighter'\n\nimport csharp from 'react-syntax-highlighter/dist/esm/languages/hljs/cs'\nimport json from 'react-syntax-highlighter/dist/esm/languages/hljs/json'\nimport shell from 'react-syntax-highlighter/dist/esm/languages/hljs/shell'\n\nimport github from 'react-syntax-highlighter/dist/esm/styles/hljs/github'\n\nSyntaxHighlighter.registerLanguage('avro', json)\nSyntaxHighlighter.registerLanguage('csharp', csharp)\nSyntaxHighlighter.registerLanguage('shell', shell)\n\n// remove the default <pre> styling\nconst style = {\n  ...github,\n  hljs: {}\n}\n\nexport default function Highlight ({ children, inline, language }) {\n  return (\n    <SyntaxHighlighter language={language} style={style} PreTag={inline ? 'span' : 'pre'}>\n      {children}\n    </SyntaxHighlighter>\n  )\n}\n","/**\n * Groups an array of objects by property.\n *\n * @param {TValue[]} list\n * An array.\n *\n * @param {string} key\n * The name of a property to use as a key.\n *\n * @returns {Map<TKey, TValue[]>}\n * A map of keys to groups.\n *\n * @template TKey, TValue\n */\nfunction groupBy (list, key) {\n  return list.reduce((map, item) => {\n    const k = item[key]\n    if (!map.has(item[key])) {\n      map.set(k, [])\n    }\n\n    map.get(k).push(item)\n    return map\n  }, new Map())\n}\n\n/**\n * Separates items in an array.\n *\n * @param {T[]} list\n * An array.\n *\n * @param {U} separator\n * An item to insert between all elements in the array.\n *\n * @returns {(T|U)[]}\n * An array.\n *\n * @template T, U\n */\nfunction join (list, separator) {\n  return list.reduce((result, item, index, array) => {\n    result.push(item)\n\n    if (index < array.length - 1) {\n      result.push(separator)\n    }\n\n    return result\n  }, [])\n}\n\nmodule.exports = {\n  groupBy, join\n}\n"],"sourceRoot":""}