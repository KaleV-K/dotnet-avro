{"version":3,"sources":["webpack:///./src/pages/guides/cli-create.js"],"names":["title","site","siteMetadata","latestRelease","projectName","to","language","inline","id"],"mappings":"mMAQMA,EAAQ,mCAEC,qBAAO,IAAD,SAEjBC,KACEC,aAAgBC,EAHD,EAGCA,cAAeC,EAHhB,EAGgBA,YAanC,OACE,oCACE,kBAAC,SAAD,KACE,+BAAQJ,IAGV,4BAAKA,GACL,sHAA4FI,EAA5F,oKACA,uGAA4E,kBAAC,IAAD,CAAMC,GAAG,sBAAT,yBAA5E,mBAEA,+CACA,kEAAwCD,EAAxC,SACA,kBAAC,IAAD,CAAWE,SAAS,SAApB,gFAC4BH,EAD5B,kCAEA,6FAAkE,6CAAlE,gFAAuK,kBAAC,IAAD,CAAcE,GAAG,yCAAjB,iBAAvK,eAEA,6CACA,qEAA0C,kBAAC,IAAD,CAAMA,GAAG,eAAc,kBAAC,IAAD,CAAWE,QAAM,EAACD,SAAS,SAA3B,WAAjE,sHACA,kBAAC,IAAD,CAAWA,SAAS,SAApB,gRAGA,6DACA,2EACA,4BACE,4BACE,kCAAO,gCAAQ,wDAAf,2IAEF,4BACE,kCAAO,gCAAQ,sDAAf,6CAAkG,kBAAC,IAAD,CAAWC,QAAM,EAACD,SAAS,QAA3B,SAAlG,OAAyJ,kBAAC,IAAD,CAAWC,QAAM,EAACD,SAAS,QAA3B,UAAzJ,uBAAiO,kBAAC,IAAD,CAAWC,QAAM,EAACD,SAAS,QAA3B,UAAjO,eAGJ,2BAAIF,EAAJ,oBAAiC,kBAAC,IAAD,CAAiBI,GAAG,wDAApB,4BAAjC,2CACA,+JACA,kBAAC,IAAD,CAAWF,SAAS,UAApB,knB","file":"component---src-pages-guides-cli-create-js-4ceaaabfeb73c934a0d3.js","sourcesContent":["import { Link, graphql, useStaticQuery } from 'gatsby'\nimport React from 'react'\nimport { Helmet } from 'react-helmet'\n\nimport Highlight from '../../components/code/highlight'\nimport DotnetReference from '../../components/references/dotnet'\nimport ExternalLink from '../../components/site/external-link'\n\nconst title = 'Creating schemas from .NET types'\n\nexport default () => {\n  const {\n    site: {\n      siteMetadata: { latestRelease, projectName }\n    }\n  } = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          latestRelease\n          projectName\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n\n      <h1>{title}</h1>\n      <p>Creating schemas from complex .NET types is a time-saving way to get started with Avro. {projectName} recognizes most commonly used types and supports classes, structs, and enums, so it’s usually possible to get a working schema with no additional manipulation.</p>\n      <p>For detailed information about how types are matched to schemas, see the <Link to='/internals/mapping'>types and conversions</Link> documentation.</p>\n\n      <h2>Getting started</h2>\n      <p>If you haven’t already, install the {projectName} CLI:</p>\n      <Highlight language='shell'>{`$ dotnet tool install Chr.Avro.Cli --global\n  Tool 'chr.avro.cli' (version '${latestRelease}') was successfully installed.`}</Highlight>\n      <p>After the CLI tool has been installed, you can invoke it using <code>dotnet avro</code>. If the install command fails, make sure you have the latest version of the <ExternalLink to='https://dotnet.microsoft.com/download'>.NET Core SDK</ExternalLink> installed.</p>\n\n      <h2>Using the CLI</h2>\n      <p>To create a schema for a type, use the <Link to='/cli#create'><Highlight inline language='shell'>create</Highlight></Link> command. You’ll need to provide the type’s full name as well as the path to a compiled assembly that contains it:</p>\n      <Highlight language='shell'>{`$ dotnet avro create --type ExampleNamespace.ExampleLibrary.ExampleClass --assembly bin/Debug/netstandard2.0/ExampleNamespace.ExampleLibrary.dll\n{\"name\":\"ExampleNamespace.ExampleLibrary.ExampleClass\",\"type\":\"record\",\"fields\":[{\"name\":\"ExampleProperty\",\"type\":\"int\"}]}`}</Highlight>\n\n      <h2>Customizing generated schemas</h2>\n      <p>The CLI ships with some convenience options:</p>\n      <ul>\n        <li>\n          <p>The <strong><code>--nullable-references</code></strong> option causes all reference types to be written as nullable unions. This is useful when you prefer to keep .NET’s nullable semantics.</p>\n        </li>\n        <li>\n          <p>The <strong><code>--enums-as-integers</code></strong> option causes enums to be represented as <Highlight inline language='avro'>\"int\"</Highlight> or <Highlight inline language='avro'>\"long\"</Highlight> schemas instead of <Highlight inline language='avro'>\"enum\"</Highlight> schemas.</p>\n        </li>\n      </ul>\n      <p>{projectName} also recognizes <DotnetReference id='T:System.Runtime.Serialization.DataContractAttribute'>data contract attributes</DotnetReference>, which can be used to customize names.</p>\n      <p>If you need to make more complicated modifications to a generated schema, you can customize the schema creation process in code:</p>\n      <Highlight language='csharp'>{`using Chr.Avro.Abstract;\nusing Chr.Avro.Representation;\nusing System;\n\nnamespace Chr.Avro.Examples.SchemaCustomization\n{\n    public class ExampleClass\n    {\n        public int NumericProperty { get; set; }\n    }\n\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            var builder = new SchemaBuilder();\n            var schema = builder.BuildSchema<ExampleClass>(); // a RecordSchema instance\n\n            // do modifications here\n\n            var writer = new JsonSchemaWriter();\n            Console.WriteLine(writer.Write(schema));\n        }\n    }\n}`}</Highlight>\n    </>\n  )\n}\n"],"sourceRoot":""}