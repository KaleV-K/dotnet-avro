{"version":3,"sources":["webpack:///./src/pages/guides/cli-generate.js","webpack:///./src/components/code/highlight.js"],"names":["title","__webpack_exports__","_staticQueryData$data","_public_static_d_1346324293_json__WEBPACK_IMPORTED_MODULE_0__","data","site","siteMetadata","latestRelease","projectName","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","Fragment","react_helmet__WEBPACK_IMPORTED_MODULE_3__","_components_code_highlight__WEBPACK_IMPORTED_MODULE_4__","language","_components_site_external_link__WEBPACK_IMPORTED_MODULE_5__","to","gatsby__WEBPACK_IMPORTED_MODULE_1__","inline","SyntaxHighlighter","registerLanguage","json","csharp","shell","style","Object","assign","github","hljs","Highlight","_ref","children","react__WEBPACK_IMPORTED_MODULE_1___default","react_syntax_highlighter__WEBPACK_IMPORTED_MODULE_2__","PreTag"],"mappings":"gKAOMA,EAAQ,uCAECC,EAAA,mBAAM,IAAAC,EAAAC,EAAAC,KAEjBC,KACEC,aAAgBC,EAHDL,EAGCK,cAAeC,EAHhBN,EAGgBM,YAanC,OACEC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAACE,EAAA,OAAD,KACEJ,EAAAC,EAAAC,cAAA,aAAQX,IAGVS,EAAAC,EAAAC,cAAA,UAAKX,GACLS,EAAAC,EAAAC,cAAA,SAAIH,EAAJ,sNAEAC,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,gDAAwCH,EAAxC,SACAC,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAWC,SAAS,SAApB,8EAC0BR,EAD1B,kCAEAE,EAAAC,EAAAC,cAAA,2EAAkEF,EAAAC,EAAAC,cAAA,2BAAlE,gFAAuKF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAcC,GAAG,yCAAjB,iBAAvK,eAEAR,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,mDAA0CF,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAMD,GAAG,iBAAgBR,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAWK,QAAM,EAACJ,SAAS,SAA3B,aAAnE,aACAN,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAWC,SAAS,SAApB,2PAUAN,EAAAC,EAAAC,cAAA,uTC3CNS,IAAkBC,iBAAiB,OAAQC,KAC3CF,IAAkBC,iBAAiB,SAAUE,KAC7CH,IAAkBC,iBAAiB,QAASG,KAG5C,IAAMC,EAAKC,OAAAC,OAAA,GACNC,IADM,CAETC,KAAM,KAGO,SAASC,EAATC,GAAoD,IAA9BC,EAA8BD,EAA9BC,SAAUb,EAAoBY,EAApBZ,OAAQJ,EAAYgB,EAAZhB,SACrD,OACEkB,EAAAvB,EAAAC,cAACuB,EAAA,EAAD,CAAmBnB,SAAUA,EAAUU,MAAOA,EAAOU,OAAQhB,EAAS,OAAS,OAC5Ea","file":"component---src-pages-guides-cli-generate-js-eb83f83b2992d1724283.js","sourcesContent":["import { Link, graphql, useStaticQuery } from 'gatsby'\nimport React from 'react'\nimport { Helmet } from 'react-helmet'\n\nimport Highlight from '../../components/code/highlight'\nimport ExternalLink from '../../components/site/external-link'\n\nconst title = 'Generating C# code from Avro schemas'\n\nexport default () => {\n  const {\n    site: {\n      siteMetadata: { latestRelease, projectName }\n    }\n  } = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          latestRelease\n          projectName\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n\n      <h1>{title}</h1>\n      <p>{projectName} is capable of generating rudimentary C# class and enum definitions to match Avro’s record and enum schemas. If you have a complex Avro schema, but no matching .NET type, code generation can save a lot of time.</p>\n\n      <h2>Getting started</h2>\n      <p>If you haven’t already, install the {projectName} CLI:</p>\n      <Highlight language='shell'>{`$ dotnet tool install Chr.Avro.Cli --global\nTool 'chr.avro.cli' (version '${latestRelease}') was successfully installed.`}</Highlight>\n      <p>After the CLI tool has been installed, you can invoke it using <code>dotnet avro</code>. If the install command fails, make sure you have the latest version of the <ExternalLink to='https://dotnet.microsoft.com/download'>.NET Core SDK</ExternalLink> installed.</p>\n\n      <h2>Using the CLI</h2>\n      <p>To generate code for a schema, use the <Link to='/cli#generate'><Highlight inline language='shell'>generate</Highlight></Link> command:</p>\n      <Highlight language='shell'>{`$ dotnet avro generate --id 42 --registry-url http://registry:8081\nnamespace ExampleNamespace\n{\n    public class ExampleClass\n    {\n        public long LongProperty { get; set; }\n\n        public string StringProperty { get; set; }\n    }\n}`}</Highlight>\n      <p>Generated enums and classes are grouped by namespace. In the future, it may be possible to customize generated names and write out results to individual files.</p>\n    </>\n  )\n}\n","import React from 'react'\nimport { LightAsync as SyntaxHighlighter } from 'react-syntax-highlighter'\n\nimport csharp from 'react-syntax-highlighter/dist/esm/languages/hljs/cs'\nimport json from 'react-syntax-highlighter/dist/esm/languages/hljs/json'\nimport shell from 'react-syntax-highlighter/dist/esm/languages/hljs/shell'\n\nimport github from 'react-syntax-highlighter/dist/esm/styles/hljs/github'\n\nSyntaxHighlighter.registerLanguage('avro', json)\nSyntaxHighlighter.registerLanguage('csharp', csharp)\nSyntaxHighlighter.registerLanguage('shell', shell)\n\n// remove the default <pre> styling\nconst style = {\n  ...github,\n  hljs: {}\n}\n\nexport default function Highlight ({ children, inline, language }) {\n  return (\n    <SyntaxHighlighter language={language} style={style} PreTag={inline ? 'span' : 'pre'}>\n      {children}\n    </SyntaxHighlighter>\n  )\n}\n"],"sourceRoot":""}