(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{Rp4N:function(e,a,t){"use strict";t.r(a);var n=t("zBv9"),l=t("Wbzz"),r=t("q1tI"),s=t.n(r),o=t("TJpk"),c=t("rCNW"),i=t("w+gZ"),m="Generating C# code from Avro schemas";a.default=function(){var e=n.data.site.siteMetadata,a=e.latestRelease,t=e.projectName;return s.a.createElement(s.a.Fragment,null,s.a.createElement(o.Helmet,null,s.a.createElement("title",null,m)),s.a.createElement("h1",null,m),s.a.createElement("p",null,t," is capable of generating rudimentary C# class and enum definitions to match Avro’s record and enum schemas. If you have a complex Avro schema, but no matching .NET type, code generation can save a lot of time."),s.a.createElement("h2",null,"Getting started"),s.a.createElement("p",null,"If you haven’t already, install the ",t," CLI:"),s.a.createElement(c.a,{language:"bash"},"$ dotnet tool install Chr.Avro.Cli --global\nTool 'chr.avro.cli' (version '"+a+"') was successfully installed."),s.a.createElement("p",null,"After the CLI tool has been installed, you can invoke it using ",s.a.createElement("code",null,"dotnet avro"),". If the install command fails, make sure you have the latest version of the ",s.a.createElement(i.a,{to:"https://dotnet.microsoft.com/download"},".NET Core SDK")," installed."),s.a.createElement("h2",null,"Using the CLI"),s.a.createElement("p",null,"To generate code for a schema, use the ",s.a.createElement(l.a,{to:"/cli#generate"},s.a.createElement(c.a,{inline:!0,language:"bash"},"generate"))," command. The CLI supports retrieving schemas from a Confluent ",s.a.createElement(i.a,{to:"https://www.confluent.io/confluent-schema-registry/"},"Schema Registry"),":"),s.a.createElement(c.a,{language:"bash"},"$ dotnet avro generate --id 42 --registry-url http://registry:8081\nnamespace ExampleNamespace\n{\n    public class ExampleClass\n    {\n        public long LongProperty { get; set; }\n\n        public string StringProperty { get; set; }\n    }\n}"),s.a.createElement("p",null,"The CLI writes generated code to the ",s.a.createElement(i.a,{to:"https://en.wikipedia.org/wiki/Standard_streams#Standard_output_(stdout)"},"console"),". Use your shell’s capabilities to read from and write to files. In Bash, that looks like this:"),s.a.createElement(c.a,{language:"bash"},"$ dotnet avro generate < example-class.avsc > ExampleClass.cs"),s.a.createElement("p",null,"And in PowerShell:"),s.a.createElement(c.a,{language:"powershell"},"PS C:\\> Get-Content .\\example-class.avsc | dotnet avro generate | Out-File .\\ExampleClass.cs"),s.a.createElement("p",null,"Generated enums and classes are grouped by namespace."))}},zBv9:function(e){e.exports=JSON.parse('{"data":{"site":{"siteMetadata":{"latestRelease":"4.0.0","projectName":"Chr.Avro"}}}}')}}]);
//# sourceMappingURL=component---src-pages-guides-cli-generate-js-fda8dcf3b5f9a7318643.js.map