{"version":3,"sources":["webpack:///./src/components/references/nuget-package.js","webpack:///./src/pages/guides/kafka.js"],"names":["NugetPackageReference","children","id","version","others","url","to","title","site","siteMetadata","latestRelease","projectName","Helmet","language"],"mappings":"2OAIe,SAASA,EAAT,GAAuE,IAArCC,EAAoC,EAApCA,SAAUC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,QAAYC,E,oIAAU,gCAC/EC,EAAG,kCAAqCH,EAM5C,OAJIC,IACFE,GAAG,IAAQF,GAGN,kBAAC,IAAD,iBAAkBC,EAAlB,CAA0BE,GAAID,IAAMJ,GAAYC,GCFzD,IAAMK,EAAQ,yCAEC,qBAAO,IAAD,SAEjBC,KACEC,aAAgBC,EAHD,EAGCA,cAAeC,EAHhB,EAGgBA,YAanC,OACE,oCACE,kBAACC,EAAA,OAAD,KACE,+BAAQL,IAGV,4BAAKA,GACL,2BAAII,EAAJ,uCAAoD,kBAAC,IAAD,CAAcL,GAAG,0DAAjB,6BAApD,0EAEA,iEACA,wFACA,kBAAC,IAAD,CAAWO,SAAS,SAApB,qDAAkFH,GAClF,4DAAiC,kBAACV,EAAD,CAAuBE,GAAG,oBAA3D,oBAAgG,kBAAC,IAAD,CAAiBA,GAAG,uCAApB,YAAhG,QAAyL,kBAAC,IAAD,CAAiBA,GAAG,uCAApB,YAAzL,sGAAiXS,EAAjX,8BACA,kBAAC,IAAD,CAAWE,SAAS,UAApB,k8CA+CF,2GAAgF,+CAAhF,OAA8G,qDAA9G,+BAA0K,mDAA1K,sNACA,qJACA,kBAAC,IAAD,CAAWA,SAAS,UAApB,m5C","file":"component---src-pages-guides-kafka-js-2e620943f465dbe36555.js","sourcesContent":["import React from 'react'\n\nimport ExternalLink from '../site/external-link'\n\nexport default function NugetPackageReference ({ children, id, version, ...others }) {\n  let url = `https://www.nuget.org/packages/${id}`\n\n  if (version) {\n    url += `/${version}`\n  }\n\n  return <ExternalLink {...others} to={url}>{children || id}</ExternalLink>\n}\n","import { graphql, useStaticQuery } from 'gatsby'\nimport React from 'react'\nimport { Helmet } from 'react-helmet'\n\nimport Highlight from '../../components/code/highlight'\nimport DotnetReference from '../../components/references/dotnet'\nimport NugetPackageReference from '../../components/references/nuget-package'\nimport ExternalLink from '../../components/site/external-link'\n\nconst title = 'Building Kafka producers and consumers'\n\nexport default () => {\n  const {\n    site: {\n      siteMetadata: { latestRelease, projectName }\n    }\n  } = useStaticQuery(graphql`\n    query {\n      site {\n        siteMetadata {\n          latestRelease\n          projectName\n        }\n      }\n    }\n  `)\n\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n\n      <h1>{title}</h1>\n      <p>{projectName} ships with first-class support for <ExternalLink to='https://github.com/confluentinc/confluent-kafka-dotnet'>Confluent’s Kafka clients</ExternalLink>, the shortest path to creating Kafka producers and consumers in .NET.</p>\n\n      <h2>Using Confluent’s client builders</h2>\n      <p>First, add a reference to the Chr.Avro.Confluent package:</p>\n      <Highlight language='shell'>{`$ dotnet add package Chr.Avro.Confluent --version ${latestRelease}`}</Highlight>\n      <p>Chr.Avro.Confluent depends on <NugetPackageReference id='Confluent.Kafka' />, which contains <DotnetReference id='T:Confluent.Kafka.ProducerBuilder`2'>producer</DotnetReference> and <DotnetReference id='T:Confluent.Kafka.ConsumerBuilder`2'>consumer</DotnetReference> builders. To build a Schema Registry-integrated producer, use the producer builder in tandem with {projectName}’s Avro extension methods:</p>\n      <Highlight language='csharp'>{`using Chr.Avro.Confluent;\nusing Confluent.Kafka;\nusing Confluent.SchemaRegistry;\nusing System;\nusing System.Threading.Tasks;\n\nnamespace Chr.Avro.Examples.KafkaProducer\n{\n    public class ExampleValue\n    {\n        public string Property { get; set; }\n    }\n\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var producerConfig = new ProducerConfig()\n            {\n                BootstrapServers = \"broker1:9092,broker2:9092\"\n            };\n\n            var registryConfig = new RegistryConfig()\n            {\n                SchemaRegistryUrl = \"http://registry:8081\"\n            };\n\n            using (var registry = new CachedSchemaRegistryClient(registryConfig))\n            {\n                var builder = new ProducerBuilder<Ignore, ExampleValue>(producerConfig)\n                    .SetAvroValueSerializer(registry, registerAutomatically: false)\n                    .SetErrorHandler((_, error) => Console.Error.WriteLine(error.ToString()));\n\n                using (var producer = builder.Build())\n                {\n                    await producer.ProduceAsync(\"example_topic\", new Message<Ignore, ExampleValue>\n                    {\n                        Value = new ExampleValue\n                        {\n                            Property = \"example!\"\n                        }\n                    });\n                }\n            }\n        }\n    }\n}`}</Highlight>\n    <p>The serializer assumes (per Confluent convention) that the value subject for <code>example_topic</code> is <code>example_topic-value</code>. (The key subject would be <code>example_topic-key</code>.) When messages are published, the serializer will attempt to pull down a schema from the Schema Registry. The serializer can be configured to generate and register a schema automatically if one doesn’t exist.</p>\n    <p>Building consumers works in a similar way—schemas will be retrieved from the Schema Registry as messages are consumed:</p>\n    <Highlight language='csharp'>{`using Chr.Avro.Confluent;\nusing Confluent.Kafka;\nusing Confluent.SchemaRegistry;\nusing System;\n\nnamespace Chr.Avro.Examples.KafkaConsumer\n{\n    public class ExampleValue\n    {\n        public string Property { get; set; }\n    }\n\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            var consumerConfig = new ConsumerConfig()\n            {\n                BootstrapServers = \"broker1:9092,broker2:9092\",\n                GroupId = \"example_consumer_group\"\n            };\n\n            var registryConfig = new RegistryConfig()\n            {\n                SchemaRegistryUrl = \"http://registry:8081\"\n            };\n\n            using (var registry = new CachedSchemaRegistryClient(registryClient))\n            {\n                var builder = new ConsumerBuilder<Ignore, ExampleValue>(consumerConfig)\n                    .SetAvroValueDeserializer(registry)\n                    .SetErrorHandler((_, error) => Console.Error.WriteLine(error.ToString()));\n\n                using (var consumer = builder.Build())\n                {\n                    consumer.Subscribe(\"example_topic\");\n\n                    while (true)\n                    {\n                        var result = consumer.Consume();\n                        Console.WriteLine(result.Value.Property);\n                    }\n                }\n            }\n        }\n    }\n}`}</Highlight>\n    </>\n  )\n}\n"],"sourceRoot":""}