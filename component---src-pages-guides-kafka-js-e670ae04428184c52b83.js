(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{234:function(e,r,n){"use strict";n.r(r);var t=n(247),a=n(0),i=n.n(a),s=n(113),o=n(237),l=n(236),c=(n(9),n(10),n(4),n(16),n(12),n(112));function u(e){var r=e.children,n=e.id,t=e.version,a=function(e,r){if(null==e)return{};var n,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,["children","id","version"]),s="https://www.nuget.org/packages/"+n;return t&&(s+="/"+t),i.a.createElement(c.a,Object.assign({},a,{to:s}),r||n)}var m="Building Kafka producers and consumers";r.default=function(){var e=t.data.site.siteMetadata,r=e.latestRelease,n=e.projectName;return i.a.createElement(i.a.Fragment,null,i.a.createElement(s.Helmet,null,i.a.createElement("title",null,m)),i.a.createElement("h1",null,m),i.a.createElement("p",null,n," ships with first-class support for ",i.a.createElement(c.a,{to:"https://github.com/confluentinc/confluent-kafka-dotnet"},"Confluent’s Kafka clients"),", the shortest path to creating Kafka producers and consumers in .NET."),i.a.createElement("h2",null,"Using Confluent’s client builders"),i.a.createElement("p",null,"First, add a reference to the Chr.Avro.Confluent package:"),i.a.createElement(o.a,{language:"shell"},"$ dotnet add package Chr.Avro.Confluent --version "+r),i.a.createElement("p",null,"Chr.Avro.Confluent depends on ",i.a.createElement(u,{id:"Confluent.Kafka"}),", which contains ",i.a.createElement(l.a,{id:"T:Confluent.Kafka.ProducerBuilder`2"},"producer")," and ",i.a.createElement(l.a,{id:"T:Confluent.Kafka.ConsumerBuilder`2"},"consumer")," builders. To build a Schema Registry-integrated producer, use the producer builder in tandem with ",n,"’s Avro extension methods:"),i.a.createElement(o.a,{language:"csharp"},'using Chr.Avro.Confluent;\nusing Confluent.Kafka;\nusing Confluent.SchemaRegistry;\nusing System;\nusing System.Threading.Tasks;\n\nnamespace Chr.Avro.Examples.KafkaProducer\n{\n    public class ExampleValue\n    {\n        public string Property { get; set; }\n    }\n\n    public class Program\n    {\n        public static async Task Main(string[] args)\n        {\n            var producerConfig = new ProducerConfig()\n            {\n                BootstrapServers = "broker1:9092,broker2:9092"\n            };\n\n            var registryConfig = new RegistryConfig()\n            {\n                SchemaRegistryUrl = "http://registry:8081"\n            };\n\n            using (var registry = new CachedSchemaRegistryClient(registryConfig))\n            {\n                var builder = new ProducerBuilder<Ignore, ExampleValue>(producerConfig)\n                    .SetAvroValueSerializer(registry, registerAutomatically: false)\n                    .SetErrorHandler((_, error) => Console.Error.WriteLine(error.ToString()));\n\n                using (var producer = builder.Build())\n                {\n                    await producer.ProduceAsync("example_topic", new Message<Ignore, ExampleValue>\n                    {\n                        Value = new ExampleValue\n                        {\n                            Property = "example!"\n                        }\n                    });\n                }\n            }\n        }\n    }\n}'),i.a.createElement("p",null,"The serializer assumes (per Confluent convention) that the value subject for ",i.a.createElement("code",null,"example_topic")," is ",i.a.createElement("code",null,"example_topic-value"),". (The key subject would be ",i.a.createElement("code",null,"example_topic-key"),".) When messages are published, the serializer will attempt to pull down a schema from the Schema Registry. The serializer can be configured to generate and register a schema automatically if one doesn’t exist."),i.a.createElement("p",null,"Building consumers works in a similar way—schemas will be retrieved from the Schema Registry as messages are consumed:"),i.a.createElement(o.a,{language:"csharp"},'using Chr.Avro.Confluent;\nusing Confluent.Kafka;\nusing Confluent.SchemaRegistry;\nusing System;\n\nnamespace Chr.Avro.Examples.KafkaConsumer\n{\n    public class ExampleValue\n    {\n        public string Property { get; set; }\n    }\n\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            var consumerConfig = new ConsumerConfig()\n            {\n                BootstrapServers = "broker1:9092,broker2:9092",\n                GroupId = "example_consumer_group"\n            };\n\n            var registryConfig = new RegistryConfig()\n            {\n                SchemaRegistryUrl = "http://registry:8081"\n            };\n\n            using (var registry = new CachedSchemaRegistryClient(registryClient))\n            {\n                var builder = new ConsumerBuilder<Ignore, ExampleValue>(consumerConfig)\n                    .SetAvroValueDeserializer(registry)\n                    .SetErrorHandler((_, error) => Console.Error.WriteLine(error.ToString()));\n\n                using (var consumer = builder.Build())\n                {\n                    consumer.Subscribe("example_topic");\n\n                    while (true)\n                    {\n                        var result = consumer.Consume();\n                        Console.WriteLine(result.Value.Property);\n                    }\n                }\n            }\n        }\n    }\n}'))}},236:function(e,r,n){"use strict";n.d(r,"a",function(){return d});n(10),n(16),n(78),n(115),n(42),n(4),n(33),n(27),n(9),n(12),n(79);var t=n(5),a=n(0),i=n.n(a),s=n(112),o=n(238),l=n(80);function c(e){return function(e){if(Array.isArray(e)){for(var r=0,n=new Array(e.length);r<e.length;r++)n[r]=e[r];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var u="https://docs.confluent.io/current/clients/confluent-kafka-dotnet/api/",m="https://docs.microsoft.com/en-us/dotnet/api/";function p(e){var r=e.id,n=e.typeParameters,t=void 0===n?[]:n,a=e.methodTypeParameters,s=void 0===a?[]:a;switch(r.substring(0,2)){case"F:":case"P:":return i.a.createElement(g,{id:r},Object(l.createMemberName)(r));case"M:":var u=[i.a.createElement(g,{key:r,id:r},Object(l.createMemberName)(r))];return s&&s.length&&u.push.apply(u,["<"].concat(c(Object(o.join)(s,", ")),[">"])),u.push.apply(u,["("].concat(c(Object(o.join)(Object(l.getMethodParameters)(r).map(function(e,r){return i.a.createElement(p,{key:r,id:"T:"+e,typeParameters:t,methodTypeParameters:s})}),", ")),[")"])),u;case"T:":var m=r.match(/^T:`(\d+)$/),d=r.match(/^T:``(\d+)$/);if(m)return t[m[1]]||"";if(d)return s[d[1]]||"";var f=[i.a.createElement(g,{key:r,id:r},Object(l.createTypeName)(r))],h=Object(l.getTypeParameters)(r),y=r.match(/^T:(.+)`(\d+)$/);return(h||y)&&(f.push("<"),h&&f.push.apply(f,c(Object(o.join)(h.map(function(e,r){return i.a.createElement(p,{key:r,id:"T:"+e,typeParameters:t,methodTypeParameters:s})}),", "))),y&&(r=y[1],f.push(new Array(+y[2]).join(","))),f.push(">")),f.push(Object(l.getTypeSuffix)(r)),f;default:return i.a.createElement(g,{id:r},r.substring(2))}}function g(e){var r=e.children,n=e.id;return/^[EFMNPT]:Chr\.Avro/.test(n)?i.a.createElement(t.a,{to:"/api/"+Object(l.createDocfxUrl)(n).toLowerCase()},r):/^[EFMNPT]:Confluent\.(?:Kafka|SchemaRegistry)/.test(n)?i.a.createElement(s.a,{to:""+u+Object(l.createDocfxUrl)(n)+".html"},r):/^[EFMNPT]:(?:Microsoft|System)/.test(n)?i.a.createElement(s.a,{to:""+m+Object(l.createDocfxUrl)(n).toLowerCase()},r):r}function d(e){var r=e.children,n=e.id,t=e.typeParameters,a=e.methodTypeParameters,s=function(e,r){if(null==e)return{};var n,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,["children","id","typeParameters","methodTypeParameters"]);return r?i.a.createElement(g,Object.assign({id:n},s),r):i.a.createElement("code",s,i.a.createElement(p,{id:n,typeParameters:t,methodTypeParameters:a}))}},237:function(e,r,n){"use strict";n.d(r,"a",function(){return m});n(12);var t=n(0),a=n.n(t),i=n(465),s=n(240),o=n(239),l=n(241),c=n(242);i.a.registerLanguage("avro",o.a),i.a.registerLanguage("csharp",s.a),i.a.registerLanguage("shell",l.a);var u=Object.assign({},c.a,{hljs:{}});function m(e){var r=e.children,n=e.inline,t=e.language;return a.a.createElement(i.a,{language:t,style:u,PreTag:n?"span":"pre"},r)}},238:function(e,r,n){n(9),n(10),n(4),n(78),n(114),e.exports={groupBy:function(e,r){return e.reduce(function(e,n){var t=n[r];return e.has(n[r])||e.set(t,[]),e.get(t).push(n),e},new Map)},join:function(e,r){return e.reduce(function(e,n,t,a){return e.push(n),t<a.length-1&&e.push(r),e},[])}}},247:function(e){e.exports={data:{site:{siteMetadata:{latestRelease:"2.0.4",projectName:"Chr.Avro"}}}}}}]);
//# sourceMappingURL=component---src-pages-guides-kafka-js-e670ae04428184c52b83.js.map