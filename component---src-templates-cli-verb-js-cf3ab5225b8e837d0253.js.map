{"version":3,"sources":["webpack:///./src/templates/cli-verb.js","webpack:///./src/components/site/breadcrumb.js"],"names":["cliVerb","data","name","to","className","styles","title","summary","examples","length","map","example","key","id","language","body","options","Array","from","groupBy","set","index","option","abbreviation","query","children","others","isArray","breadcrumb","child"],"mappings":"mRAWe,0BAAWA,EAAX,EAAGC,KAAQD,QAAX,OACb,oCACE,kBAAC,SAAD,KACE,8CAAuBA,EAAQE,OAGjC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMC,GAAG,QAAT,kBAGF,wBAAIC,UAAWC,IAAOC,OACpB,8BAAON,EAAQE,OAGjB,2BAAIF,EAAQO,SAEXP,EAAQQ,SAASC,OAAS,GACzB,oCACE,wCAECT,EAAQQ,SAASE,KAAI,SAAAC,GAAO,OAC3B,kBAAC,WAAD,CAAUC,IAAKD,EAAQE,IACrB,4BAAKF,EAAQL,OACb,kBAAC,IAAD,CAAWQ,SAAS,SAASH,EAAQI,WAM5Cf,EAAQgB,QAAQP,OAAS,GACxB,oCACE,uCACCQ,MAAMC,KAAKC,kBAAQnB,EAAQgB,QAAS,QAAQN,KAAI,SAACU,EAAKC,GAAN,OAC/C,kBAAC,WAAD,CAAUT,IAAKS,GACZD,EAAI,IACH,4BAAKA,EAAI,IAGVA,EAAI,GAAGX,OAAS,GACf,4BACGW,EAAI,GAAGV,KAAI,SAAAY,GAAM,OAChB,kBAAC,WAAD,CAAUV,IAAKU,EAAOT,IACpB,4BACE,8BACGS,EAAOC,cAAP,IAA2BD,EAAOC,aAAlC,KADH,KAEQD,EAAOpB,OAGjB,4BACGoB,EAAOf,qBAYvB,IAAMiB,EAAK,c,kICpEH,gBAA8B,IAA3BC,EAA0B,EAA1BA,SAAaC,E,oIAAa,iBAC1C,GAAKD,EAQL,OAJKR,MAAMU,QAAQF,KACjBA,EAAW,CAACA,IAIZ,sCAAIrB,UAAWC,IAAOuB,YAAgBF,GACnCD,EAASf,KAAI,SAACmB,EAAOR,GAAR,OACZ,wBAAIT,IAAKS,GAAQQ","file":"component---src-templates-cli-verb-js-cf3ab5225b8e837d0253.js","sourcesContent":["import { Link, graphql } from 'gatsby'\nimport React, { Fragment } from 'react'\nimport { Helmet } from 'react-helmet'\n\nimport Highlight from '../components/code/highlight'\nimport Breadcrumb from '../components/site/breadcrumb'\n\nimport { groupBy } from '../../utilities/array'\n\nimport styles from './cli.module.scss'\n\nexport default ({ data: { cliVerb } }) =>\n  <>\n    <Helmet>\n      <title>{`dotnet avro ${cliVerb.name}`}</title>\n    </Helmet>\n\n    <Breadcrumb>\n      <Link to='/cli'>CLI reference</Link>\n    </Breadcrumb>\n\n    <h1 className={styles.title}>\n      <code>{cliVerb.name}</code>\n    </h1>\n\n    <p>{cliVerb.summary}</p>\n\n    {cliVerb.examples.length > 0 &&\n      <>\n        <h3>Examples</h3>\n\n        {cliVerb.examples.map(example =>\n          <Fragment key={example.id}>\n            <h5>{example.title}</h5>\n            <Highlight language='shell'>{example.body}</Highlight>\n          </Fragment>\n        )}\n      </>\n    }\n\n    {cliVerb.options.length > 0 &&\n      <>\n        <h3>Options</h3>\n        {Array.from(groupBy(cliVerb.options, 'set')).map((set, index) =>\n          <Fragment key={index}>\n            {set[0] &&\n              <h5>{set[0]}</h5>\n            }\n\n            {set[1].length > 0 &&\n              <dl>\n                {set[1].map(option =>\n                  <Fragment key={option.id}>\n                    <dt>\n                      <code>\n                        {option.abbreviation && `-${option.abbreviation}, `}\n                        {`--${option.name}`}\n                      </code>\n                    </dt>\n                    <dd>\n                      {option.summary}\n                    </dd>\n                  </Fragment>\n                )}\n              </dl>\n            }\n          </Fragment>\n        )}\n      </>\n    }\n  </>\n\nexport const query = graphql`\n  query CliVerbDetailQuery($id: String!) {\n    cliVerb(id: { eq: $id }) {\n      name\n      summary\n      examples {\n        id\n        body\n        title\n      }\n      options {\n        id\n        abbreviation\n        name\n        required\n        set\n        summary\n      }\n    }\n  }\n`\n","import React from 'react'\n\nimport styles from './breadcrumb.module.scss'\n\nexport default ({ children, ...others }) => {\n  if (!children) {\n    return\n  }\n\n  if (!Array.isArray(children)) {\n    children = [children]\n  }\n\n  return (\n    <ul className={styles.breadcrumb} {...others}>\n      {children.map((child, index) =>\n        <li key={index}>{child}</li>\n      )}\n    </ul>\n  )\n}\n"],"sourceRoot":""}