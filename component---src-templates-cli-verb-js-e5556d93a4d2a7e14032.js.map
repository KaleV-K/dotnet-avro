{"version":3,"sources":["webpack:///./src/templates/cli-verb.js","webpack:///./src/components/code/highlight.js","webpack:///./utilities/array.js","webpack:///./src/components/site/breadcrumb.js"],"names":["__webpack_exports__","_ref","cliVerb","data","react__WEBPACK_IMPORTED_MODULE_4___default","a","createElement","Fragment","react_helmet__WEBPACK_IMPORTED_MODULE_5__","name","_components_site_breadcrumb__WEBPACK_IMPORTED_MODULE_7__","gatsby__WEBPACK_IMPORTED_MODULE_3__","to","className","styles","title","summary","examples","length","map","example","react__WEBPACK_IMPORTED_MODULE_4__","key","id","_components_code_highlight__WEBPACK_IMPORTED_MODULE_6__","language","body","options","Array","from","groupBy","set","index","option","abbreviation","query","SyntaxHighlighter","registerLanguage","json","csharp","shell","style","Object","assign","github","hljs","Highlight","children","inline","react__WEBPACK_IMPORTED_MODULE_1___default","react_syntax_highlighter__WEBPACK_IMPORTED_MODULE_2__","PreTag","module","exports","list","reduce","item","k","has","get","push","Map","join","separator","result","array","others","_objectWithoutPropertiesLoose","isArray","react__WEBPACK_IMPORTED_MODULE_5___default","breadcrumb","child"],"mappings":"0OAWeA,EAAA,iBAAAC,GAAA,IAAWC,EAAXD,EAAGE,KAAQD,QAAX,OACbE,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAACE,EAAA,OAAD,KACEJ,EAAAC,EAAAC,cAAA,4BAAuBJ,EAAQO,OAGjCL,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,QAAT,kBAGFR,EAAAC,EAAAC,cAAA,MAAIO,UAAWC,IAAOC,OACpBX,EAAAC,EAAAC,cAAA,YAAOJ,EAAQO,OAGjBL,EAAAC,EAAAC,cAAA,SAAIJ,EAAQc,SAEXd,EAAQe,SAASC,OAAS,GACzBd,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,sBAECJ,EAAQe,SAASE,IAAI,SAAAC,GAAO,OAC3BhB,EAAAC,EAAAC,cAACe,EAAA,SAAD,CAAUC,IAAKF,EAAQG,IACrBnB,EAAAC,EAAAC,cAAA,UAAKc,EAAQL,OACbX,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAWC,SAAS,SAASL,EAAQM,UAM5CxB,EAAQyB,QAAQT,OAAS,GACxBd,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,qBACCsB,MAAMC,KAAKC,kBAAQ5B,EAAQyB,QAAS,QAAQR,IAAI,SAACY,EAAKC,GAAN,OAC/C5B,EAAAC,EAAAC,cAACe,EAAA,SAAD,CAAUC,IAAKU,GACZD,EAAI,IACH3B,EAAAC,EAAAC,cAAA,UAAKyB,EAAI,IAGVA,EAAI,GAAGb,OAAS,GACfd,EAAAC,EAAAC,cAAA,UACGyB,EAAI,GAAGZ,IAAI,SAAAc,GAAM,OAChB7B,EAAAC,EAAAC,cAACe,EAAA,SAAD,CAAUC,IAAKW,EAAOV,IACpBnB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,YACG2B,EAAOC,cAAP,IAA2BD,EAAOC,aAAlC,KADH,KAEQD,EAAOxB,OAGjBL,EAAAC,EAAAC,cAAA,UACG2B,EAAOjB,mBAYvB,IAAMmB,EAAK,sJC/DlBC,IAAkBC,iBAAiB,OAAQC,KAC3CF,IAAkBC,iBAAiB,SAAUE,KAC7CH,IAAkBC,iBAAiB,QAASG,KAG5C,IAAMC,EAAKC,OAAAC,OAAA,GACNC,IADM,CAETC,KAAM,KAGO,SAASC,EAAT7C,GAAoD,IAA9B8C,EAA8B9C,EAA9B8C,SAAUC,EAAoB/C,EAApB+C,OAAQvB,EAAYxB,EAAZwB,SACrD,OACEwB,EAAA5C,EAAAC,cAAC4C,EAAA,EAAD,CAAmBzB,SAAUA,EAAUgB,MAAOA,EAAOU,OAAQH,EAAS,OAAS,OAC5ED,sDC8BPK,EAAOC,QAAU,CACfvB,QAvCF,SAAkBwB,EAAMhC,GACtB,OAAOgC,EAAKC,OAAO,SAACpC,EAAKqC,GACvB,IAAMC,EAAID,EAAKlC,GAMf,OALKH,EAAIuC,IAAIF,EAAKlC,KAChBH,EAAIY,IAAI0B,EAAG,IAGbtC,EAAIwC,IAAIF,GAAGG,KAAKJ,GACTrC,GACN,IAAI0C,MA8BEC,KAbX,SAAeR,EAAMS,GACnB,OAAOT,EAAKC,OAAO,SAACS,EAAQR,EAAMxB,EAAOiC,GAOvC,OANAD,EAAOJ,KAAKJ,GAERxB,EAAQiC,EAAM/C,OAAS,GACzB8C,EAAOJ,KAAKG,GAGPC,GACN,0GC7CUhE,EAAA,WAAAC,GAA6B,IAA1B8C,EAA0B9C,EAA1B8C,SAAamB,sIAAaC,CAAAlE,EAAA,cAC1C,GAAK8C,EAQL,OAJKnB,MAAMwC,QAAQrB,KACjBA,EAAW,CAACA,IAIZsB,EAAAhE,EAAAC,cAAA,KAAAoC,OAAAC,OAAA,CAAI9B,UAAWC,IAAOwD,YAAgBJ,GACnCnB,EAAS5B,IAAI,SAACoD,EAAOvC,GAAR,OACZqC,EAAAhE,EAAAC,cAAA,MAAIgB,IAAKU,GAAQuC","file":"component---src-templates-cli-verb-js-e5556d93a4d2a7e14032.js","sourcesContent":["import { Link, graphql } from 'gatsby'\nimport React, { Fragment } from 'react'\nimport { Helmet } from 'react-helmet'\n\nimport Highlight from '../components/code/highlight'\nimport Breadcrumb from '../components/site/breadcrumb'\n\nimport { groupBy } from '../../utilities/array'\n\nimport styles from './cli.module.scss'\n\nexport default ({ data: { cliVerb } }) =>\n  <>\n    <Helmet>\n      <title>{`dotnet avro ${cliVerb.name}`}</title>\n    </Helmet>\n\n    <Breadcrumb>\n      <Link to='/cli'>CLI reference</Link>\n    </Breadcrumb>\n\n    <h1 className={styles.title}>\n      <code>{cliVerb.name}</code>\n    </h1>\n\n    <p>{cliVerb.summary}</p>\n\n    {cliVerb.examples.length > 0 &&\n      <>\n        <h3>Examples</h3>\n\n        {cliVerb.examples.map(example =>\n          <Fragment key={example.id}>\n            <h5>{example.title}</h5>\n            <Highlight language='shell'>{example.body}</Highlight>\n          </Fragment>\n        )}\n      </>\n    }\n\n    {cliVerb.options.length > 0 &&\n      <>\n        <h3>Options</h3>\n        {Array.from(groupBy(cliVerb.options, 'set')).map((set, index) =>\n          <Fragment key={index}>\n            {set[0] &&\n              <h5>{set[0]}</h5>\n            }\n\n            {set[1].length > 0 &&\n              <dl>\n                {set[1].map(option =>\n                  <Fragment key={option.id}>\n                    <dt>\n                      <code>\n                        {option.abbreviation && `-${option.abbreviation}, `}\n                        {`--${option.name}`}\n                      </code>\n                    </dt>\n                    <dd>\n                      {option.summary}\n                    </dd>\n                  </Fragment>\n                )}\n              </dl>\n            }\n          </Fragment>\n        )}\n      </>\n    }\n  </>\n\nexport const query = graphql`\n  query CliVerbDetailQuery($id: String!) {\n    cliVerb(id: { eq: $id }) {\n      name\n      summary\n      examples {\n        id\n        body\n        title\n      }\n      options {\n        id\n        abbreviation\n        name\n        required\n        set\n        summary\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { LightAsync as SyntaxHighlighter } from 'react-syntax-highlighter'\n\nimport csharp from 'react-syntax-highlighter/dist/esm/languages/hljs/cs'\nimport json from 'react-syntax-highlighter/dist/esm/languages/hljs/json'\nimport shell from 'react-syntax-highlighter/dist/esm/languages/hljs/shell'\n\nimport github from 'react-syntax-highlighter/dist/esm/styles/hljs/github'\n\nSyntaxHighlighter.registerLanguage('avro', json)\nSyntaxHighlighter.registerLanguage('csharp', csharp)\nSyntaxHighlighter.registerLanguage('shell', shell)\n\n// remove the default <pre> styling\nconst style = {\n  ...github,\n  hljs: {}\n}\n\nexport default function Highlight ({ children, inline, language }) {\n  return (\n    <SyntaxHighlighter language={language} style={style} PreTag={inline ? 'span' : 'pre'}>\n      {children}\n    </SyntaxHighlighter>\n  )\n}\n","/**\n * Groups an array of objects by property.\n *\n * @param {TValue[]} list\n * An array.\n *\n * @param {string} key\n * The name of a property to use as a key.\n *\n * @returns {Map<TKey, TValue[]>}\n * A map of keys to groups.\n *\n * @template TKey, TValue\n */\nfunction groupBy (list, key) {\n  return list.reduce((map, item) => {\n    const k = item[key]\n    if (!map.has(item[key])) {\n      map.set(k, [])\n    }\n\n    map.get(k).push(item)\n    return map\n  }, new Map())\n}\n\n/**\n * Separates items in an array.\n *\n * @param {T[]} list\n * An array.\n *\n * @param {U} separator\n * An item to insert between all elements in the array.\n *\n * @returns {(T|U)[]}\n * An array.\n *\n * @template T, U\n */\nfunction join (list, separator) {\n  return list.reduce((result, item, index, array) => {\n    result.push(item)\n\n    if (index < array.length - 1) {\n      result.push(separator)\n    }\n\n    return result\n  }, [])\n}\n\nmodule.exports = {\n  groupBy, join\n}\n","import React from 'react'\n\nimport styles from './breadcrumb.module.scss'\n\nexport default ({ children, ...others }) => {\n  if (!children) {\n    return\n  }\n\n  if (!Array.isArray(children)) {\n    children = [children]\n  }\n\n  return (\n    <ul className={styles.breadcrumb} {...others}>\n      {children.map((child, index) =>\n        <li key={index}>{child}</li>\n      )}\n    </ul>\n  )\n}\n"],"sourceRoot":""}