{"version":3,"sources":["webpack:///./src/components/dotnet/member-detail.js","webpack:///./src/components/dotnet/overload-table.js","webpack:///./src/templates/dotnet-member.js","webpack:///./src/components/code/highlight.js","webpack:///./node_modules/core-js/modules/es6.array.find.js","webpack:///./src/components/dotnet/inheritance-table.js"],"names":["member_detail","_ref","member","exceptions","kind","parameters","remarks","returns","summary","type","typeParameters","typeParameterNames","map","p","name","methodTypeParameterNames","react_default","a","createElement","Fragment","xml_doc","xml","inheritance_table","length","parameter","index","react","key","dotnet","id","methodTypeParameters","exception","overload_table","className","styles","table","overloads","overload","Object","assign","__webpack_exports__","dotnetMember","data","Helmet","breadcrumb","gatsby_browser_entry","to","namespace","title","query","SyntaxHighlighter","registerLanguage","json","csharp","shell","style","github","hljs","Highlight","children","inline","language","react__WEBPACK_IMPORTED_MODULE_1___default","react_syntax_highlighter__WEBPACK_IMPORTED_MODULE_2__","PreTag","$export","__webpack_require__","$find","forced","Array","P","F","find","callbackfn","this","arguments","undefined","object","assembly","base","interfaces","signature","typeSignatures","memberSignatures","s","react__WEBPACK_IMPORTED_MODULE_2___default","_references_dotnet__WEBPACK_IMPORTED_MODULE_4__","_code_highlight__WEBPACK_IMPORTED_MODULE_3__","value","rowSpan"],"mappings":"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","file":"component---src-templates-dotnet-member-js-702c6df90f437605c523.js","sourcesContent":["import React, { Fragment } from 'react'\n\nimport DotnetReference from '../references/dotnet'\n\nimport InheritanceTable from './inheritance-table'\nimport XmlDoc from './xml-doc'\n\nexport default ({ member }) => {\n  const { exceptions, kind, parameters, remarks, returns, summary, type, typeParameters } = member\n\n  const typeParameterNames = (type.typeParameters || []).map(p => p.name)\n  const methodTypeParameterNames = (typeParameters || []).map(p => p.name)\n\n  return (\n    <>\n      {summary &&\n        <XmlDoc xml={summary} />\n      }\n\n      <InheritanceTable member={member} />\n\n      {remarks &&\n        <XmlDoc xml={remarks} />\n      }\n\n      {typeParameters && typeParameters.length > 0 &&\n        <>\n          <h3>Type parameters</h3>\n          {typeParameters.map((parameter, index) =>\n            <Fragment key={index}>\n              <h5>{parameter.name}</h5>\n              {parameter.summary && <XmlDoc xml={parameter.summary} />}\n            </Fragment>\n          )}\n        </>\n      }\n\n      {parameters && parameters.length > 0 &&\n        <>\n          <h3>Parameters</h3>\n          {parameters.map((parameter, index) =>\n            <Fragment key={index}>\n              <h5><DotnetReference id={parameter.type} typeParameters={typeParameterNames} methodTypeParameters={methodTypeParameterNames} /> {parameter.name}</h5>\n              {parameter.summary && <XmlDoc xml={parameter.summary} />}\n            </Fragment>\n          )}\n        </>\n      }\n\n      {returns &&\n        <>\n          <h3>{kind === 'method'\n            ? 'Return type'\n            : 'Type'\n          }</h3>\n          <h5><DotnetReference id={returns.type} typeParameters={typeParameterNames} methodTypeParameters={methodTypeParameterNames} /></h5>\n          {returns.summary && <XmlDoc xml={returns.summary} />}\n        </>\n      }\n\n      {exceptions && exceptions.length > 0 &&\n        <>\n          <h3>Exceptions</h3>\n          {exceptions.map((exception, index) =>\n            <Fragment key={index}>\n              <h5><DotnetReference id={exception.type} typeParameters={typeParameterNames} methodTypeParameters={methodTypeParameterNames} /></h5>\n              {exception.summary && <XmlDoc xml={exception.summary} />}\n            </Fragment>\n          )}\n        </>\n      }\n    </>\n  )\n}\n","import React, { Fragment } from 'react'\n\nimport DotnetReference from '../references/dotnet'\n\nimport MemberDetail from './member-detail'\nimport XmlDoc from './xml-doc'\n\nimport styles from './overload-table.module.scss'\n\nexport default ({ member }) =>\n  <>\n    <table className={styles.table}>\n      <tbody>\n        {member.overloads.map(overload =>\n          <tr key={overload.id}>\n            <th><DotnetReference id={overload.id} /></th>\n            <td>{overload.summary && <XmlDoc xml={overload.summary} />}</td>\n          </tr>\n        )}\n      </tbody>\n    </table>\n\n    {member.overloads.map(overload =>\n      <Fragment key={overload.id}>\n        <h3><DotnetReference id={overload.id} /></h3>\n        <MemberDetail key={overload.id} member={{ ...member, ...overload }} />\n      </Fragment>\n    )}\n  </>\n","import { Link, graphql } from 'gatsby'\nimport React from 'react'\nimport { Helmet } from 'react-helmet'\n\nimport MemberDetail from '../components/dotnet/member-detail'\nimport OverloadTable from '../components/dotnet/overload-table'\nimport DotnetReference from '../components/references/dotnet'\nimport Breadcrumb from '../components/site/breadcrumb'\n\nimport styles from './dotnet.module.scss'\n\nexport default ({ data: { dotnetMember }}) => {\n  const { kind, name, overloads, type } = dotnetMember\n\n  return (\n    <>\n      <Helmet>\n        <title>{`${kind === 'constructor' ? type.name : name} ${kind}`}</title>\n      </Helmet>\n\n      <Breadcrumb>\n        <Link to='/api'>API reference</Link>\n        <DotnetReference id={type.namespace.id}>\n          <code>{type.namespace.name}</code> namespace\n        </DotnetReference>\n        <DotnetReference id={type.id}>\n          <code>{type.name}</code> {type.kind}\n        </DotnetReference>\n      </Breadcrumb>\n\n      <h1 className={styles.title}>\n        <code>{kind === 'constructor' ? type.name : name}</code> {kind}\n      </h1>\n\n      {overloads.length === 1\n        ? <MemberDetail member={{ ...dotnetMember, ...overloads[0] }} />\n        : <OverloadTable member={dotnetMember} />\n      }\n    </>\n  )\n}\n\nexport const query = graphql`\n  query DotnetMemberDetailQuery($id: String!) {\n    dotnetMember(id: { eq: $id }) {\n      id\n      kind\n      name\n      overloads {\n        id\n        base\n        exceptions {\n          summary\n          type\n        }\n        memberSignatures {\n          language\n          value\n        }\n        parameters {\n          name\n          summary\n          type\n        }\n        remarks\n        returns {\n          summary\n          type\n        }\n        summary\n        typeParameters {\n          name\n          summary\n        }\n      }\n      type {\n        id\n        kind\n        name\n        namespace {\n          id\n          name\n        }\n        typeParameters {\n          name\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\r\nimport { LightAsync as SyntaxHighlighter } from 'react-syntax-highlighter'\r\n\r\nimport csharp from 'react-syntax-highlighter/dist/esm/languages/hljs/cs'\r\nimport json from 'react-syntax-highlighter/dist/esm/languages/hljs/json'\r\nimport shell from 'react-syntax-highlighter/dist/esm/languages/hljs/shell'\r\n\r\nimport github from 'react-syntax-highlighter/dist/esm/styles/hljs/github'\r\n\r\nSyntaxHighlighter.registerLanguage('avro', json)\r\nSyntaxHighlighter.registerLanguage('csharp', csharp)\r\nSyntaxHighlighter.registerLanguage('shell', shell)\r\n\r\n// remove the default <pre> styling\r\nconst style = {\r\n  ...github,\r\n  hljs: {}\r\n}\r\n\r\nexport default function Highlight ({ children, inline, language }) {\r\n  return (\r\n    <SyntaxHighlighter language={language} style={style} PreTag={inline ? 'span' : 'pre'}>\r\n      {children}\r\n    </SyntaxHighlighter>\r\n  )\r\n}\r\n","'use strict';\n// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(5);\nvar KEY = 'find';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  find: function find(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n","import React from 'react'\n\nimport Highlight from '../code/highlight'\nimport DotnetReference from '../references/dotnet'\n\nimport styles from './inheritance-table.module.scss'\n\nexport default ({ member, type }) => {\n  const object = type || member\n\n  const { assembly, base, interfaces, namespace } = object\n  const signature = (object.typeSignatures || object.memberSignatures || []).find(s => s.language === 'C#')\n  const typeParameters = (object.typeParameters || []).map(p => p.name)\n\n  return (\n    <table className={styles.table}>\n      <tbody>\n        {assembly &&\n          <tr>\n            <th>Assembly</th>\n            <td>\n              <DotnetReference id={assembly.id} />\n            </td>\n          </tr>\n        }\n\n        {namespace &&\n          <tr>\n            <th>Namespace</th>\n            <td>\n              <DotnetReference id={namespace.id} />\n            </td>\n          </tr>\n        }\n\n        {signature &&\n          <tr>\n            <th>Signature</th>\n            <td>\n              <Highlight language='csharp'>{signature.value}</Highlight>\n            </td>\n          </tr>\n        }\n\n        {base &&\n          <tr>\n            <th>Base</th>\n            <td>\n              <DotnetReference id={base} typeParameters={typeParameters} />\n            </td>\n          </tr>\n        }\n\n        {interfaces && interfaces.length > 0 && interfaces.map((id, index) =>\n          <tr key={index}>\n            {index === 0 &&\n              <th rowSpan={interfaces.length}>Interfaces</th>\n            }\n            <td>\n              <DotnetReference id={id} typeParameters={typeParameters} />\n            </td>\n          </tr>\n        )}\n      </tbody>\n    </table>\n  )\n}\n"],"sourceRoot":""}