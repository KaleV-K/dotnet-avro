{"version":3,"sources":["webpack:///./src/components/dotnet/type-table.js","webpack:///./src/components/dotnet/namespace-detail.js","webpack:///./src/templates/dotnet-namespace.js"],"names":["type_table","_ref","types","length","map","type","react_default","a","createElement","react","key","id","dotnet","xml_doc","xml","summary","namespace_detail","namespace","classes","filter","t","kind","interfaces","Fragment","__webpack_exports__","dotnetNamespace","data","Helmet","name","breadcrumb","gatsby_browser_entry","to","className","styles","title","query"],"mappings":"8JAKeA,EAAA,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,MAAH,OACbA,EAAMC,OAAS,GAAKD,EAAME,IAAI,SAAAC,GAAI,OAChCC,EAAAC,EAAAC,cAACC,EAAA,SAAD,CAAUC,IAAKL,EAAKM,IAClBL,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAiBD,GAAIN,EAAKM,MAE5BL,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQC,IAAKT,EAAKU,cCNTC,EAAA,SAAAf,GAAmB,IAAhBgB,EAAgBhB,EAAhBgB,UACRF,EAAYE,EAAZF,QACFG,EAAUD,EAAUf,MAAMiB,OAAO,SAAAC,GAAC,MAAe,UAAXA,EAAEC,OACxCC,EAAaL,EAAUf,MAAMiB,OAAO,SAAAC,GAAC,MAAe,cAAXA,EAAEC,OAEjD,OACEf,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgB,SAAA,KACGR,GACCT,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQC,IAAKC,IAGdG,EAAQf,OAAS,GAChBG,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgB,SAAA,KACEjB,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAACR,EAAD,CAAWE,MAAOgB,KAIrBI,EAAWnB,OAAS,GACnBG,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgB,SAAA,KACEjB,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAACR,EAAD,CAAWE,MAAOoB,sECjBbE,EAAA,iBAAAvB,GAAA,IAAWwB,EAAXxB,EAAGyB,KAAQD,gBAAX,OACbnB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAgB,SAAA,KACEjB,EAAAC,EAAAC,cAACmB,EAAA,OAAD,KACErB,EAAAC,EAAAC,cAAA,aAAWiB,EAAgBG,KAA3B,eAGFtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,KACEvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAMC,GAAG,QAAT,kBAGFzB,EAAAC,EAAAC,cAAA,MAAIwB,UAAWC,IAAOC,OACpB5B,EAAAC,EAAAC,cAAA,YAAOiB,EAAgBG,MADzB,cAIAtB,EAAAC,EAAAC,cAACQ,EAAD,CAAiBC,UAAWQ,MAdjB,IAiBFU,EAAK","file":"component---src-templates-dotnet-namespace-js-d87c3b2c64d58319bafe.js","sourcesContent":["import React, { Fragment } from 'react'\n\nimport XmlDoc from '../dotnet/xml-doc'\nimport DotnetReference from '../references/dotnet'\n\nexport default ({ types }) =>\n  types.length > 0 && types.map(type =>\n    <Fragment key={type.id}>\n      <h5>\n        <DotnetReference id={type.id} />\n      </h5>\n      <XmlDoc xml={type.summary} />\n    </Fragment>\n  )\n","import React from 'react'\n\nimport TypeTable from './type-table'\nimport XmlDoc from './xml-doc'\n\nexport default ({ namespace }) => {\n  const { summary } = namespace\n  const classes = namespace.types.filter(t => t.kind === 'class')\n  const interfaces = namespace.types.filter(t => t.kind === 'interface')\n\n  return (\n    <>\n      {summary &&\n        <XmlDoc xml={summary} />\n      }\n\n      {classes.length > 0 &&\n        <>\n          <h3>Classes</h3>\n          <TypeTable types={classes} />\n        </>\n      }\n\n      {interfaces.length > 0 &&\n        <>\n          <h3>Interfaces</h3>\n          <TypeTable types={interfaces} />\n        </>\n      }\n    </>\n  )\n}\n","import { Link, graphql } from 'gatsby'\nimport React from 'react'\nimport { Helmet } from 'react-helmet'\n\nimport NamespaceDetail from '../components/dotnet/namespace-detail'\nimport Breadcrumb from '../components/site/breadcrumb'\n\nimport styles from './dotnet.module.scss'\n\nexport default ({ data: { dotnetNamespace }}) =>\n  <>\n    <Helmet>\n      <title>{`${dotnetNamespace.name} namespace`}</title>\n    </Helmet>\n\n    <Breadcrumb>\n      <Link to='/api'>API reference</Link>\n    </Breadcrumb>\n\n    <h1 className={styles.title}>\n      <code>{dotnetNamespace.name}</code> namespace\n    </h1>\n\n    <NamespaceDetail namespace={dotnetNamespace} />\n  </>\n\nexport const query = graphql`\n  query DotnetNamespaceDetailQuery($id: String!) {\n    dotnetNamespace(id: { eq: $id }) {\n      id\n      name\n      types {\n        id\n        kind\n        name\n        namespace {\n          id\n        }\n        summary\n      }\n    }\n  }\n`\n"],"sourceRoot":""}