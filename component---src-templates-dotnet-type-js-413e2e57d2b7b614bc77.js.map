{"version":3,"sources":["webpack:///./src/components/dotnet/member-table.js","webpack:///./src/components/dotnet/type-detail.js","webpack:///./src/templates/dotnet-type.js","webpack:///./src/components/code/highlight.js","webpack:///./node_modules/core-js/modules/es6.array.find.js","webpack:///./src/components/dotnet/inheritance-table.js"],"names":["member_table","_ref","members","typeParameters","map","p","name","length","member","react_default","a","createElement","react","key","id","overloads","overload","methodTypeParameters","kind","returns","Fragment","dotnet","type","xml_doc","xml","summary","type_detail","remarks","groupBy","constructors","get","fields","properties","methods","inheritance_table","__webpack_exports__","dotnetType","data","namespace","Helmet","breadcrumb","gatsby_browser_entry","to","className","styles","title","query","SyntaxHighlighter","registerLanguage","json","csharp","shell","style","Object","assign","github","hljs","Highlight","children","inline","language","react__WEBPACK_IMPORTED_MODULE_1___default","react_syntax_highlighter__WEBPACK_IMPORTED_MODULE_2__","PreTag","$export","__webpack_require__","$find","forced","Array","P","F","find","callbackfn","this","arguments","undefined","object","assembly","base","interfaces","signature","typeSignatures","memberSignatures","s","react__WEBPACK_IMPORTED_MODULE_2___default","table","_references_dotnet__WEBPACK_IMPORTED_MODULE_4__","_code_highlight__WEBPACK_IMPORTED_MODULE_3__","value","index","rowSpan"],"mappings":"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","file":"component---src-templates-dotnet-type-js-413e2e57d2b7b614bc77.js","sourcesContent":["import React, { Fragment } from 'react'\n\nimport XmlDoc from '../dotnet/xml-doc'\nimport DotnetReference from '../references/dotnet'\n\nexport default ({ members, typeParameters }) => {\n  typeParameters = (typeParameters || []).map(p => p.name)\n\n  return members.length > 0 && members.map(member =>\n    <Fragment key={member.id}>\n      {member.overloads.map(overload => {\n        const methodTypeParameters = member.kind === 'method' && overload.typeParameters\n          ? overload.typeParameters.map(p => p.name)\n          : null\n\n        return (\n          <Fragment key={overload.id}>\n            <h5>\n              {overload.returns &&\n                <><DotnetReference id={overload.returns.type} typeParameters={typeParameters} methodTypeParameters={methodTypeParameters} /> </>\n              }\n\n              <DotnetReference id={overload.id} typeParameters={typeParameters} methodTypeParameters={methodTypeParameters} />\n            </h5>\n            <XmlDoc xml={overload.summary} />\n          </Fragment>\n        )\n      })}\n    </Fragment>\n  )\n}\n","import React from 'react'\n\nimport InheritanceTable from './inheritance-table'\nimport MemberTable from './member-table'\nimport XmlDoc from './xml-doc'\n\nimport { groupBy } from '../../../utilities/array'\n\nexport default ({ type }) => {\n  const { remarks, summary, typeParameters } = type\n\n  const members = groupBy((type.members || []), 'kind')\n  const constructors = members.get('constructor')\n  const fields = members.get('field')\n  const properties = members.get('property')\n  const methods = members.get('method')\n\n  return (\n    <>\n      {summary &&\n        <XmlDoc xml={summary} />\n      }\n\n      <InheritanceTable type={type} />\n\n      {remarks &&\n        <XmlDoc xml={remarks} />\n      }\n\n      {constructors &&\n        <>\n          <h3>Constructors</h3>\n          <MemberTable members={constructors} typeParameters={typeParameters} />\n        </>\n      }\n\n      {fields &&\n        <>\n          <h3>Fields</h3>\n          <MemberTable members={fields} typeParameters={typeParameters} />\n        </>\n      }\n\n      {properties &&\n        <>\n          <h3>Properties</h3>\n          <MemberTable members={properties} typeParameters={typeParameters} />\n        </>\n      }\n\n      {methods &&\n        <>\n          <h3>Methods</h3>\n          <MemberTable members={methods} typeParameters={typeParameters} />\n        </>\n      }\n    </>\n  )\n}\n","import { Link, graphql } from 'gatsby'\nimport React from 'react'\nimport { Helmet } from 'react-helmet'\n\nimport TypeDetail from '../components/dotnet/type-detail'\nimport DotnetReference from '../components/references/dotnet'\nimport Breadcrumb from '../components/site/breadcrumb'\n\nimport styles from './dotnet.module.scss'\n\nexport default ({ data: { dotnetType }}) => {\n  const { kind, name, namespace } = dotnetType\n\n  return (\n    <>\n      <Helmet>\n        <title>{`${name} ${kind}`}</title>\n      </Helmet>\n\n      <Breadcrumb>\n        <Link to='/api'>API reference</Link>\n        <DotnetReference id={namespace.id}>\n          <code>{namespace.name}</code> namespace\n        </DotnetReference>\n      </Breadcrumb>\n\n      <h1 className={styles.title}>\n        <code>{name}</code> {kind}\n      </h1>\n\n      <TypeDetail type={dotnetType} />\n    </>\n  )\n}\n\nexport const query = graphql`\n  query DotnetTypeDetailQuery($id: String!) {\n    dotnetType(id: { eq: $id }) {\n      base\n      kind\n      interfaces\n      name\n      remarks\n      summary\n      assembly {\n        id\n      }\n      members {\n        id\n        kind\n        name\n        overloads {\n          id\n          returns {\n            summary\n            type\n          }\n          summary\n          typeParameters {\n            name\n          }\n        }\n      }\n      namespace {\n        id\n        name\n      }\n      typeParameters {\n        name\n      }\n      typeSignatures {\n        language\n        value\n      }\n    }\n  }\n`\n","import React from 'react'\r\nimport { LightAsync as SyntaxHighlighter } from 'react-syntax-highlighter'\r\n\r\nimport csharp from 'react-syntax-highlighter/dist/esm/languages/hljs/cs'\r\nimport json from 'react-syntax-highlighter/dist/esm/languages/hljs/json'\r\nimport shell from 'react-syntax-highlighter/dist/esm/languages/hljs/shell'\r\n\r\nimport github from 'react-syntax-highlighter/dist/esm/styles/hljs/github'\r\n\r\nSyntaxHighlighter.registerLanguage('avro', json)\r\nSyntaxHighlighter.registerLanguage('csharp', csharp)\r\nSyntaxHighlighter.registerLanguage('shell', shell)\r\n\r\n// remove the default <pre> styling\r\nconst style = {\r\n  ...github,\r\n  hljs: {}\r\n}\r\n\r\nexport default function Highlight ({ children, inline, language }) {\r\n  return (\r\n    <SyntaxHighlighter language={language} style={style} PreTag={inline ? 'span' : 'pre'}>\r\n      {children}\r\n    </SyntaxHighlighter>\r\n  )\r\n}\r\n","'use strict';\n// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(5);\nvar KEY = 'find';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  find: function find(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n","import React from 'react'\n\nimport Highlight from '../code/highlight'\nimport DotnetReference from '../references/dotnet'\n\nimport styles from './inheritance-table.module.scss'\n\nexport default ({ member, type }) => {\n  const object = type || member\n\n  const { assembly, base, interfaces, namespace } = object\n  const signature = (object.typeSignatures || object.memberSignatures || []).find(s => s.language === 'C#')\n  const typeParameters = (object.typeParameters || []).map(p => p.name)\n\n  return (\n    <table className={styles.table}>\n      <tbody>\n        {assembly &&\n          <tr>\n            <th>Assembly</th>\n            <td>\n              <DotnetReference id={assembly.id} />\n            </td>\n          </tr>\n        }\n\n        {namespace &&\n          <tr>\n            <th>Namespace</th>\n            <td>\n              <DotnetReference id={namespace.id} />\n            </td>\n          </tr>\n        }\n\n        {signature &&\n          <tr>\n            <th>Signature</th>\n            <td>\n              <Highlight language='csharp'>{signature.value}</Highlight>\n            </td>\n          </tr>\n        }\n\n        {base &&\n          <tr>\n            <th>Base</th>\n            <td>\n              <DotnetReference id={base} typeParameters={typeParameters} />\n            </td>\n          </tr>\n        }\n\n        {interfaces && interfaces.length > 0 && interfaces.map((id, index) =>\n          <tr key={index}>\n            {index === 0 &&\n              <th rowSpan={interfaces.length}>Interfaces</th>\n            }\n            <td>\n              <DotnetReference id={id} typeParameters={typeParameters} />\n            </td>\n          </tr>\n        )}\n      </tbody>\n    </table>\n  )\n}\n"],"sourceRoot":""}