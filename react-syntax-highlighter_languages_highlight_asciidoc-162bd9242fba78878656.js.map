{"version":3,"sources":["webpack:///./node_modules/highlight.js/lib/languages/asciidoc.js"],"names":["module","exports","hljs","aliases","contains","COMMENT","relevance","className","begin","end","variants","excludeEnd","subLanguage","returnBegin","excludeBegin"],"mappings":"4EAAAA,EAAAC,QAAA,SAAAC,GACA,OACAC,QAAA,SACAC,SAAA,CACAF,EAAAG,QAAA,YAAwB,YAGxB,CACAC,UAAA,KAEAJ,EAAAG,QAAA,WACAC,UAAA,IAEA,CACAC,UAAA,QACAC,MAAA,cAEA,CACAA,MAAA,iBACAC,IAAA,kBACAH,UAAA,IAEA,CACAC,UAAA,UACAD,UAAA,GACAI,SAAA,EACAF,MAAA,yBACO,CACPA,MAAA,0CAGA,CACAD,UAAA,OACAC,MAAA,SACAC,IAAA,MACAE,YAAA,EACAL,UAAA,IAEA,CACAC,UAAA,OACAC,MAAA,cACAF,UAAA,GAEA,CACAC,UAAA,QACAC,MAAA,YACAC,IAAA,YACAH,UAAA,IAEA,CACAC,UAAA,OACAC,MAAA,mBACAC,IAAA,mBACAH,UAAA,IAEA,CACAE,MAAA,cACAC,IAAA,cACAL,SAAA,EACAI,MAAA,IACAC,IAAA,IACAG,YAAA,MACAN,UAAA,IAEAA,UAAA,IAEA,CACAC,UAAA,SACAC,MAAA,oCAEA,CACAD,UAAA,SACAC,MAAA,6CACAF,UAAA,IAEA,CACAC,UAAA,SAEAC,MAAA,qBACAC,IAAA,eAEAL,SAAA,EACAI,MAAA,WACAF,UAAA,KAGA,CACAC,UAAA,WAEAC,MAAA,iBACAC,IAAA,aAEAL,SAAA,EACAI,MAAA,WACAF,UAAA,IAEAA,UAAA,GAEA,CACAC,UAAA,WAEAC,MAAA,cACAC,IAAA,aACAH,UAAA,GAEA,CACAC,UAAA,SACAG,SAAA,EACAF,MAAA,WACO,CACPA,MAAA,WAGA,CACAD,UAAA,OACAC,MAAA,oBACAF,UAAA,GAEA,CACAC,UAAA,OACAC,MAAA,UACAC,IAAA,IACAH,UAAA,GAEA,CACAE,MAAA,iBACAF,UAAA,IAEA,CACAE,MAAA,0DACAK,aAAA,EACAT,SAAA,EACAI,MAAA,kBACAF,UAAA,GACO,CACPC,UAAA,OACAC,MAAA,MACAC,IAAA,UACAH,UAAA,GACO,CACPC,UAAA,SACAC,MAAA,MACAC,IAAA,MACAK,cAAA,EACAH,YAAA,EACAL,UAAA,IAEAA,UAAA","file":"react-syntax-highlighter_languages_highlight_asciidoc-162bd9242fba78878656.js","sourcesContent":["module.exports = function (hljs) {\n  return {\n    aliases: ['adoc'],\n    contains: [// block comment\n    hljs.COMMENT('^/{4,}\\\\n', '\\\\n/{4,}$', // can also be done as...\n    //'^/{4,}$',\n    //'^/{4,}$',\n    {\n      relevance: 10\n    }), // line comment\n    hljs.COMMENT('^//', '$', {\n      relevance: 0\n    }), // title\n    {\n      className: 'title',\n      begin: '^\\\\.\\\\w.*$'\n    }, // example, admonition & sidebar blocks\n    {\n      begin: '^[=\\\\*]{4,}\\\\n',\n      end: '\\\\n^[=\\\\*]{4,}$',\n      relevance: 10\n    }, // headings\n    {\n      className: 'section',\n      relevance: 10,\n      variants: [{\n        begin: '^(={1,5}) .+?( \\\\1)?$'\n      }, {\n        begin: '^[^\\\\[\\\\]\\\\n]+?\\\\n[=\\\\-~\\\\^\\\\+]{2,}$'\n      }]\n    }, // document attributes\n    {\n      className: 'meta',\n      begin: '^:.+?:',\n      end: '\\\\s',\n      excludeEnd: true,\n      relevance: 10\n    }, // block attributes\n    {\n      className: 'meta',\n      begin: '^\\\\[.+?\\\\]$',\n      relevance: 0\n    }, // quoteblocks\n    {\n      className: 'quote',\n      begin: '^_{4,}\\\\n',\n      end: '\\\\n_{4,}$',\n      relevance: 10\n    }, // listing and literal blocks\n    {\n      className: 'code',\n      begin: '^[\\\\-\\\\.]{4,}\\\\n',\n      end: '\\\\n[\\\\-\\\\.]{4,}$',\n      relevance: 10\n    }, // passthrough blocks\n    {\n      begin: '^\\\\+{4,}\\\\n',\n      end: '\\\\n\\\\+{4,}$',\n      contains: [{\n        begin: '<',\n        end: '>',\n        subLanguage: 'xml',\n        relevance: 0\n      }],\n      relevance: 10\n    }, // lists (can only capture indicators)\n    {\n      className: 'bullet',\n      begin: '^(\\\\*+|\\\\-+|\\\\.+|[^\\\\n]+?::)\\\\s+'\n    }, // admonition\n    {\n      className: 'symbol',\n      begin: '^(NOTE|TIP|IMPORTANT|WARNING|CAUTION):\\\\s+',\n      relevance: 10\n    }, // inline strong\n    {\n      className: 'strong',\n      // must not follow a word character or be followed by an asterisk or space\n      begin: '\\\\B\\\\*(?![\\\\*\\\\s])',\n      end: '(\\\\n{2}|\\\\*)',\n      // allow escaped asterisk followed by word char\n      contains: [{\n        begin: '\\\\\\\\*\\\\w',\n        relevance: 0\n      }]\n    }, // inline emphasis\n    {\n      className: 'emphasis',\n      // must not follow a word character or be followed by a single quote or space\n      begin: '\\\\B\\'(?![\\'\\\\s])',\n      end: '(\\\\n{2}|\\')',\n      // allow escaped single quote followed by word char\n      contains: [{\n        begin: '\\\\\\\\\\'\\\\w',\n        relevance: 0\n      }],\n      relevance: 0\n    }, // inline emphasis (alt)\n    {\n      className: 'emphasis',\n      // must not follow a word character or be followed by an underline or space\n      begin: '_(?![_\\\\s])',\n      end: '(\\\\n{2}|_)',\n      relevance: 0\n    }, // inline smart quotes\n    {\n      className: 'string',\n      variants: [{\n        begin: \"``.+?''\"\n      }, {\n        begin: \"`.+?'\"\n      }]\n    }, // inline code snippets (TODO should get same treatment as strong and emphasis)\n    {\n      className: 'code',\n      begin: '(`.+?`|\\\\+.+?\\\\+)',\n      relevance: 0\n    }, // indented literal block\n    {\n      className: 'code',\n      begin: '^[ \\\\t]',\n      end: '$',\n      relevance: 0\n    }, // horizontal rules\n    {\n      begin: '^\\'{3,}[ \\\\t]*$',\n      relevance: 10\n    }, // images and links\n    {\n      begin: '(link:)?(http|https|ftp|file|irc|image:?):\\\\S+\\\\[.*?\\\\]',\n      returnBegin: true,\n      contains: [{\n        begin: '(link|image:?):',\n        relevance: 0\n      }, {\n        className: 'link',\n        begin: '\\\\w',\n        end: '[^\\\\[]+',\n        relevance: 0\n      }, {\n        className: 'string',\n        begin: '\\\\[',\n        end: '\\\\]',\n        excludeBegin: true,\n        excludeEnd: true,\n        relevance: 0\n      }],\n      relevance: 10\n    }]\n  };\n};"],"sourceRoot":""}