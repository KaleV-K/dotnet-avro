{"version":3,"sources":["webpack:///./node_modules/highlight.js/lib/languages/cpp.js"],"names":["module","exports","hljs","CPP_PRIMITIVE_TYPES","className","begin","STRINGS","variants","end","illegal","contains","BACKSLASH_ESCAPE","NUMBERS","relevance","PREPROCESSOR","keywords","meta-keyword","inherit","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","FUNCTION_TITLE","IDENT_RE","CPP_KEYWORDS","keyword","built_in","literal","EXPRESSION_CONTAINS","aliases","concat","beginKeywords","returnBegin","excludeEnd","TITLE_MODE","preprocessor","strings"],"mappings":"4EAAAA,EAAAC,QAAA,SAAAC,GACA,IAAAC,EAAA,CACAC,UAAA,UACAC,MAAA,sBAEAC,EAAA,CACAF,UAAA,SACAG,SAAA,EACAF,MAAA,cACAG,IAAA,IACAC,QAAA,MACAC,SAAA,CAAAR,EAAAS,mBACK,CAKLN,MAAA,kBACAG,IAAA,QACK,CACLH,MAAA,UACAG,IAAA,IACAC,QAAA,OAGAG,EAAA,CACAR,UAAA,SACAG,SAAA,EACAF,MAAA,iBACK,CACLA,MAAA,mEACK,CACLA,MAAA,wFAEAQ,UAAA,GAEAC,EAAA,CACAV,UAAA,OACAC,MAAA,eACAG,IAAA,IACAO,SAAA,CACAC,eAAA,kFAEAN,SAAA,EACAL,MAAA,OACAQ,UAAA,GACKX,EAAAe,QAAAX,EAAA,CACLF,UAAA,gBACK,CACLA,UAAA,cACAC,MAAA,YACAG,IAAA,IACAC,QAAA,OACKP,EAAAgB,oBAAAhB,EAAAiB,uBAELC,EAAAlB,EAAAmB,SAAA,UACAC,EAAA,CACAC,QAAA,+rBACAC,SAAA,4vBACAC,QAAA,2BAEAC,EAAA,CAAAvB,EAAAD,EAAAgB,oBAAAhB,EAAAiB,qBAAAP,EAAAN,GACA,OACAqB,QAAA,iCACAZ,SAAAO,EACAb,QAAA,KACAC,SAAAgB,EAAAE,OAAA,CAAAd,EAAA,CACAT,MAAA,mJACAG,IAAA,IACAO,SAAAO,EACAZ,SAAA,QAAAP,IACK,CACLE,MAAAH,EAAAmB,SAAA,KACAN,SAAAO,GACK,CAILf,SAAA,EACAF,MAAA,IACAG,IAAA,KACO,CACPH,MAAA,KACAG,IAAA,MACO,CACPqB,cAAA,wBACArB,IAAA,MAEAO,SAAAO,EACAZ,SAAAgB,EAAAE,OAAA,EACAvB,MAAA,KACAG,IAAA,KACAO,SAAAO,EACAZ,SAAAgB,EAAAE,OAAA,UACAf,UAAA,KAEAA,UAAA,GACK,CACLT,UAAA,WACAC,MAAA,IAAAH,EAAAmB,SAAA,eAAAD,EACAU,aAAA,EACAtB,IAAA,QACAuB,YAAA,EACAhB,SAAAO,EACAb,QAAA,aACAC,SAAA,EACAL,MAAAe,EACAU,aAAA,EACApB,SAAA,CAAAR,EAAA8B,YACAnB,UAAA,GACO,CACPT,UAAA,SACAC,MAAA,KACAG,IAAA,KACAO,SAAAO,EACAT,UAAA,EACAH,SAAA,CAAAR,EAAAgB,oBAAAhB,EAAAiB,qBAAAb,EAAAM,EAAAT,EACA,CACAE,MAAA,KACAG,IAAA,KACAO,SAAAO,EACAT,UAAA,EACAH,SAAA,QAAAR,EAAAgB,oBAAAhB,EAAAiB,qBAAAb,EAAAM,EAAAT,MAEOD,EAAAgB,oBAAAhB,EAAAiB,qBAAAL,IACF,CACLV,UAAA,QACAyB,cAAA,eACArB,IAAA,QACAE,SAAA,EACAL,MAAA,IACAG,IAAA,IACAE,SAAA,UAEAR,EAAA8B,eAEA/B,QAAA,CACAgC,aAAAnB,EACAoB,QAAA5B,EACAS,SAAAO","file":"react-syntax-highlighter_languages_highlight_cpp-79dd13ae736af769be4a.js","sourcesContent":["module.exports = function (hljs) {\n  var CPP_PRIMITIVE_TYPES = {\n    className: 'keyword',\n    begin: '\\\\b[a-z\\\\d_]*_t\\\\b'\n  };\n  var STRINGS = {\n    className: 'string',\n    variants: [{\n      begin: '(u8?|U|L)?\"',\n      end: '\"',\n      illegal: '\\\\n',\n      contains: [hljs.BACKSLASH_ESCAPE]\n    }, {\n      // TODO: This does not handle raw string literals with prefixes. Using\n      // a single regex with backreferences would work (note to use *?\n      // instead of * to make it non-greedy), but the mode.terminators\n      // computation in highlight.js breaks the counting.\n      begin: '(u8?|U|L)?R\"\\\\(',\n      end: '\\\\)\"'\n    }, {\n      begin: '\\'\\\\\\\\?.',\n      end: '\\'',\n      illegal: '.'\n    }]\n  };\n  var NUMBERS = {\n    className: 'number',\n    variants: [{\n      begin: '\\\\b(0b[01\\']+)'\n    }, {\n      begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)(u|U|l|L|ul|UL|f|F|b|B)'\n    }, {\n      begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)'\n    }],\n    relevance: 0\n  };\n  var PREPROCESSOR = {\n    className: 'meta',\n    begin: /#\\s*[a-z]+\\b/,\n    end: /$/,\n    keywords: {\n      'meta-keyword': 'if else elif endif define undef warning error line ' + 'pragma ifdef ifndef include'\n    },\n    contains: [{\n      begin: /\\\\\\n/,\n      relevance: 0\n    }, hljs.inherit(STRINGS, {\n      className: 'meta-string'\n    }), {\n      className: 'meta-string',\n      begin: /<[^\\n>]*>/,\n      end: /$/,\n      illegal: '\\\\n'\n    }, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE]\n  };\n  var FUNCTION_TITLE = hljs.IDENT_RE + '\\\\s*\\\\(';\n  var CPP_KEYWORDS = {\n    keyword: 'int float while private char catch import module export virtual operator sizeof ' + 'dynamic_cast|10 typedef const_cast|10 const for static_cast|10 union namespace ' + 'unsigned long volatile static protected bool template mutable if public friend ' + 'do goto auto void enum else break extern using asm case typeid ' + 'short reinterpret_cast|10 default double register explicit signed typename try this ' + 'switch continue inline delete alignof constexpr decltype ' + 'noexcept static_assert thread_local restrict _Bool complex _Complex _Imaginary ' + 'atomic_bool atomic_char atomic_schar ' + 'atomic_uchar atomic_short atomic_ushort atomic_int atomic_uint atomic_long atomic_ulong atomic_llong ' + 'atomic_ullong new throw return ' + 'and or not',\n    built_in: 'std string cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream ' + 'auto_ptr deque list queue stack vector map set bitset multiset multimap unordered_set ' + 'unordered_map unordered_multiset unordered_multimap array shared_ptr abort abs acos ' + 'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp ' + 'fscanf isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper ' + 'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow ' + 'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp ' + 'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan ' + 'vfprintf vprintf vsprintf endl initializer_list unique_ptr',\n    literal: 'true false nullptr NULL'\n  };\n  var EXPRESSION_CONTAINS = [CPP_PRIMITIVE_TYPES, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, NUMBERS, STRINGS];\n  return {\n    aliases: ['c', 'cc', 'h', 'c++', 'h++', 'hpp'],\n    keywords: CPP_KEYWORDS,\n    illegal: '</',\n    contains: EXPRESSION_CONTAINS.concat([PREPROCESSOR, {\n      begin: '\\\\b(deque|list|queue|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array)\\\\s*<',\n      end: '>',\n      keywords: CPP_KEYWORDS,\n      contains: ['self', CPP_PRIMITIVE_TYPES]\n    }, {\n      begin: hljs.IDENT_RE + '::',\n      keywords: CPP_KEYWORDS\n    }, {\n      // This mode covers expression context where we can't expect a function\n      // definition and shouldn't highlight anything that looks like one:\n      // `return some()`, `else if()`, `(x*sum(1, 2))`\n      variants: [{\n        begin: /=/,\n        end: /;/\n      }, {\n        begin: /\\(/,\n        end: /\\)/\n      }, {\n        beginKeywords: 'new throw return else',\n        end: /;/\n      }],\n      keywords: CPP_KEYWORDS,\n      contains: EXPRESSION_CONTAINS.concat([{\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        contains: EXPRESSION_CONTAINS.concat(['self']),\n        relevance: 0\n      }]),\n      relevance: 0\n    }, {\n      className: 'function',\n      begin: '(' + hljs.IDENT_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\n      returnBegin: true,\n      end: /[{;=]/,\n      excludeEnd: true,\n      keywords: CPP_KEYWORDS,\n      illegal: /[^\\w\\s\\*&]/,\n      contains: [{\n        begin: FUNCTION_TITLE,\n        returnBegin: true,\n        contains: [hljs.TITLE_MODE],\n        relevance: 0\n      }, {\n        className: 'params',\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: CPP_KEYWORDS,\n        relevance: 0,\n        contains: [hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, STRINGS, NUMBERS, CPP_PRIMITIVE_TYPES, // Count matching parentheses.\n        {\n          begin: /\\(/,\n          end: /\\)/,\n          keywords: CPP_KEYWORDS,\n          relevance: 0,\n          contains: ['self', hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, STRINGS, NUMBERS, CPP_PRIMITIVE_TYPES]\n        }]\n      }, hljs.C_LINE_COMMENT_MODE, hljs.C_BLOCK_COMMENT_MODE, PREPROCESSOR]\n    }, {\n      className: 'class',\n      beginKeywords: 'class struct',\n      end: /[{;:]/,\n      contains: [{\n        begin: /</,\n        end: />/,\n        contains: ['self']\n      }, // skip generic stuff\n      hljs.TITLE_MODE]\n    }]),\n    exports: {\n      preprocessor: PREPROCESSOR,\n      strings: STRINGS,\n      keywords: CPP_KEYWORDS\n    }\n  };\n};"],"sourceRoot":""}