{"version":3,"sources":["webpack:///./node_modules/highlight.js/lib/languages/xquery.js"],"names":["module","exports","hljs","METHOD","begin","end","CONTAINS","className","variants","contains","relevance","aliases","case_insensitive","lexemes","illegal","keywords","keyword","literal"],"mappings":"6EAAAA,EAAAC,QAAA,SAAAC,GACA,IA0CAC,EAAA,CACAC,MAAA,IACAC,IAAA,KAEAC,EAAA,CA5CA,CACAF,MAAA,oBAOA,CACAG,UAAA,SACAC,SAAA,EACAJ,MAAA,IACAC,IAAA,IACAI,SAAA,EACAL,MAAA,KACAM,UAAA,KAEK,CACLN,MAAA,IACAC,IAAA,IACAI,SAAA,EACAL,MAAA,KACAM,UAAA,OAnBA,CACAH,UAAA,SACAH,MAAA,4EACAM,UAAA,GAwBA,CACAH,UAAA,UACAH,MAAA,OACAC,IAAA,OACAK,UAAA,GACAD,SAAA,EACAF,UAAA,SACAH,MAAA,WAXA,CACAG,UAAA,OACAH,MAAA,SAgBAD,GAEA,OADAA,EAAAM,SAAAH,EACA,CACAK,QAAA,eACAC,kBAAA,EACAC,QAAA,6BACAC,QAAA,0CACAC,SAAA,CACAC,QAtDA,kiBAuDAC,QAtDA,4JAwDAR,SAAAH","file":"react-syntax-highlighter_languages_highlight_xquery-4f59beae473b9b913561.js","sourcesContent":["module.exports = function (hljs) {\n  var KEYWORDS = 'for let if while then else return where group by xquery encoding version' + 'module namespace boundary-space preserve strip default collation base-uri ordering' + 'copy-namespaces order declare import schema namespace function option in allowing empty' + 'at tumbling window sliding window start when only end when previous next stable ascending' + 'descending empty greatest least some every satisfies switch case typeswitch try catch and' + 'or to union intersect instance of treat as castable cast map array delete insert into' + 'replace value rename copy modify update';\n  var LITERAL = 'false true xs:string xs:integer element item xs:date xs:datetime xs:float xs:double xs:decimal QName xs:anyURI xs:long xs:int xs:short xs:byte attribute';\n  var VAR = {\n    begin: /\\$[a-zA-Z0-9\\-]+/\n  };\n  var NUMBER = {\n    className: 'number',\n    begin: '(\\\\b0[0-7_]+)|(\\\\b0x[0-9a-fA-F_]+)|(\\\\b[1-9][0-9_]*(\\\\.[0-9_]+)?)|[0_]\\\\b',\n    relevance: 0\n  };\n  var STRING = {\n    className: 'string',\n    variants: [{\n      begin: /\"/,\n      end: /\"/,\n      contains: [{\n        begin: /\"\"/,\n        relevance: 0\n      }]\n    }, {\n      begin: /'/,\n      end: /'/,\n      contains: [{\n        begin: /''/,\n        relevance: 0\n      }]\n    }]\n  };\n  var ANNOTATION = {\n    className: 'meta',\n    begin: '%\\\\w+'\n  };\n  var COMMENT = {\n    className: 'comment',\n    begin: '\\\\(:',\n    end: ':\\\\)',\n    relevance: 10,\n    contains: [{\n      className: 'doctag',\n      begin: '@\\\\w+'\n    }]\n  };\n  var METHOD = {\n    begin: '{',\n    end: '}'\n  };\n  var CONTAINS = [VAR, STRING, NUMBER, COMMENT, ANNOTATION, METHOD];\n  METHOD.contains = CONTAINS;\n  return {\n    aliases: ['xpath', 'xq'],\n    case_insensitive: false,\n    lexemes: /[a-zA-Z\\$][a-zA-Z0-9_:\\-]*/,\n    illegal: /(proc)|(abstract)|(extends)|(until)|(#)/,\n    keywords: {\n      keyword: KEYWORDS,\n      literal: LITERAL\n    },\n    contains: CONTAINS\n  };\n};"],"sourceRoot":""}